{"version":3,"file":"static/js/497.344a53d2.chunk.js","mappings":"8PAaA,SAASA,EAAY,GAAyB,IAAvBC,EAAI,EAAJA,KAAMC,EAAY,EAAZA,aAC3B,OACE,SAAC,IAAK,CAACC,UAAU,MAAMC,eAAe,SAASC,GAAI,CAAEC,GAAI,EAAGC,gBAAiB,eAAgB,UAC3F,UAAC,IAAiB,CAChBC,MAAM,UACNC,MAAOR,EACPS,WAAS,EACT,aAAW,eAAc,WAEzB,SAAC,IAAY,CAACD,MAAM,MAAMJ,GAAI,CAAEM,aAAc,QAAUC,QAASV,EAAa,SAAC,iBAG/E,SAAC,IAAY,CAACO,MAAM,SAASG,QAASV,EAAa,SAAC,oBAGpD,SAAC,IAAY,CAACO,MAAM,SAASJ,GAAI,CAAEM,aAAc,QAAUC,QAASV,EAAa,UAC/E,SAAC,IAAK,CAACW,aAAc,GAAIL,MAAM,UAAS,SAAC,iBAOnD,CAEA,SAASM,EAAkB,GAAqB,IAAnBb,EAAI,EAAJA,KAAMc,EAAQ,EAARA,SACjC,GAAa,QAATd,EACF,OAAO,SAAC,KAAQ,CAACe,GAAG,kBAGtB,GAAa,WAATf,EACF,OAAO,SAAC,KAAQ,CAACe,GAAG,qBAGtB,GAAa,WAATf,EAAmB,CACrB,IAAMgB,EAAI,oCAAgCF,GAC1C,OAAO,SAAC,KAAQ,CAACC,GAAIC,GACvB,CACF,CAEe,SAASC,EAAS,GAAe,IAAbC,EAAQ,EAARA,SAC3BC,GAASC,EAAAA,EAAAA,MACPC,EAAeF,EAAfE,WACR,GAAuBC,EAAAA,EAAAA,MAAhBC,GAAiC,YAArB,GACnB,GAAwBC,EAAAA,EAAAA,UAASN,GAAS,eAAnClB,EAAI,KAAEyB,EAAO,MAEpBC,EAAAA,EAAAA,YAAU,WAEND,EADEJ,GAGMH,EAEZ,GAAG,CAACG,EAAYH,IAEhBS,QAAQC,IAAIV,EAAUG,EAAYF,EAAQI,GAM1C,OACE,SAAC,IAAQ,WACP,UAAC,IAAK,CAACrB,UAAU,SAAQ,WACvB,SAACH,EAAW,CAACC,KAAMA,EAAMC,aAPV,SAAC4B,EAAOC,GAC3BL,EAAQK,EACV,KAMM,SAACjB,EAAiB,CAACb,KAAMA,EAAMc,SAAUS,EAAaQ,IAAI,kBAIlE,CAWAlB,EAAkBmB,aAAe,CAC/BlB,SAAU,G","sources":["pages/memories/Memories.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { Navigate, useParams, useSearchParams } from 'react-router-dom';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport Stack from '@mui/material/Stack';\nimport Badge from '@mui/material/Badge';\n\nimport BasePage from '../base_page';\n//  import OwnMemories from './Own';\n//  import SharedMemories from './Shared';\n//  import ReviewMemories from './Review';\n\nfunction MemoryModes({ mode, handleChange }) {\n  return (\n    <Stack direction=\"row\" justifyContent=\"center\" sx={{ py: 1, backgroundColor: 'button.main' }}>\n      <ToggleButtonGroup\n        color=\"primary\"\n        value={mode}\n        exclusive\n        aria-label=\"Memory Modes\"\n      >\n        <ToggleButton value=\"own\" sx={{ borderRadius: '30px' }} onClick={handleChange}>\n          My Memories\n        </ToggleButton>\n        <ToggleButton value=\"shared\" onClick={handleChange}>\n          Shared With Me\n        </ToggleButton>\n        <ToggleButton value=\"review\" sx={{ borderRadius: '30px' }} onClick={handleChange}>\n          <Badge badgeContent={99} color=\"primary\">\n            Review\n          </Badge>\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </Stack>\n  );\n}\n\nfunction MemoryModeContent({ mode, memoryID }) {\n  if (mode === 'own') {\n    return <Navigate to=\"/memories/own\" />;\n  }\n\n  if (mode === 'shared') {\n    return <Navigate to=\"/memories/shared\" />;\n  }\n\n  if (mode === 'review') {\n    const path = `/memories/review?memoryID=${memoryID}`;\n    return <Navigate to={path} />;\n  }\n}\n\nexport default function Memories({ initMode }) {\n  const params = useParams();\n  const { memoryMode } = params;\n  const [searchParams] = useSearchParams();\n  const [mode, setMode] = useState(initMode);\n\n  useEffect(() => {\n    if (memoryMode) {\n      setMode(memoryMode);\n    } else {\n      setMode(initMode);\n    }\n  }, [memoryMode, initMode]);\n\n  console.log(initMode, memoryMode, params, searchParams);\n\n  const handleChange = (event, newMode) => {\n    setMode(newMode);\n  };\n\n  return (\n    <BasePage>\n      <Stack direction=\"column\">\n        <MemoryModes mode={mode} handleChange={handleChange} />\n        <MemoryModeContent mode={mode} memoryID={searchParams.get('memoryID')} />\n      </Stack>\n    </BasePage>\n  );\n}\n\nMemories.propTypes = {\n  initMode: PropTypes.string.isRequired,\n};\n\nMemoryModes.propTypes = {\n  mode: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n\nMemoryModeContent.defaultProps = {\n  memoryID: '',\n};\n\nMemoryModeContent.propTypes = {\n  mode: PropTypes.string.isRequired,\n  memoryID: PropTypes.string,\n};\n"],"names":["MemoryModes","mode","handleChange","direction","justifyContent","sx","py","backgroundColor","color","value","exclusive","borderRadius","onClick","badgeContent","MemoryModeContent","memoryID","to","path","Memories","initMode","params","useParams","memoryMode","useSearchParams","searchParams","useState","setMode","useEffect","console","log","event","newMode","get","defaultProps"],"sourceRoot":""}