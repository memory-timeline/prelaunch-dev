{"version":3,"file":"static/js/148.82077710.chunk.js","mappings":"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","sources":["pages/collage/View.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport collageapi from 'api/collage';\nimport helpers from 'components/collage/helpers';\nimport BaseCollage from 'pages/collage/Base';\n\nasync function getImages(imgDets, urls, handleImageDetails, startLoad) {\n  const urlFileMap = {};\n  await Promise.allSettled(\n    Object.entries(urls).map(([title, url]) =>\n      fetch(url)\n        .then((resp) => resp.blob())\n        .then((f) => {\n          urlFileMap[title] = f;\n        })\n    )\n  );\n  console.log('get images', urlFileMap);\n  const urlBase64Map = {};\n  await Promise.allSettled(\n    Object.entries(urlFileMap).map(([title, f]) =>\n      helpers.convertBase64(f).then((b64) => {\n        urlBase64Map[title] = b64;\n      })\n    )\n  );\n  console.log('get images base64', urlBase64Map);\n  startLoad();\n  const tempImages = await Promise.allSettled(\n    imgDets.map(async (img) => {\n      const { naturalWidth, naturalHeight, title, aspectRatio, type } = img;\n      console.log('handle image convert', title);\n      // const imageSRC = await fetch(urls[title]).then((resp) => resp.blob());\n      const imageSRC = urlFileMap[title];\n      const base64SRC = urlBase64Map[title];\n      const result = new Promise((resolve) => {\n        const image = new Image();\n        image.onload = (e) => {\n          const { size } = e.target;\n          const imageDetail = {\n            title,\n            src: helpers.optimizeImage(image, 1500, 1500 / aspectRatio),\n            originalSRC: base64SRC,\n            originalHeight: naturalHeight,\n            originalWidth: naturalWidth,\n            naturalHeight: 1500 / aspectRatio,\n            naturalWidth: 1500,\n            aspectRatio,\n            type,\n            file: imageSRC,\n          };\n          handleImageDetails(imageDetail);\n          console.log('handle image convert done', title, size);\n          resolve(imageDetail);\n        };\n        image.src = base64SRC;\n      });\n      return result;\n    })\n  );\n  return tempImages.map((elem) => elem.value);\n}\n\nexport default function CollageView() {\n  const params = useParams();\n  const { collageID } = params;\n\n  const getCollage = async (\n    handleImageCount,\n    handleNewImageCount,\n    handleImageDetails\n  ) => {\n    console.log('get collage from params', collageID);\n    console.time('view collage');\n    const details = await collageapi.getCollage(collageID);\n    handleImageCount(details.details.images.length);\n    handleNewImageCount(details.details.images.length);\n    const images = await getImages(\n      details.details.images,\n      details.urls,\n      handleImageDetails,\n      () => {\n        handleImageCount(details.details.images.length);\n        handleNewImageCount(details.details.images.length);\n      }\n    );\n    console.log('image details', images);\n    const imageDets = images.map((img) => {\n      const { src, originalSRC, file, ...rest } = img;\n      return rest;\n    });\n    console.timeEnd('view collage');\n    return { details: { ...details.details, images: imageDets }, images };\n  };\n\n  return (\n    <BaseCollage\n      getCollage={getCollage}\n      clearCollage={() => collageapi.deleteCollage(collageID)}\n      saveType=\"existing\"\n    />\n  );\n}\n"],"names":["getImages","imgDets","urls","handleImageDetails","startLoad","urlFileMap","Promise","allSettled","Object","entries","map","title","url","fetch","then","resp","blob","f","console","log","urlBase64Map","helpers","b64","img","naturalWidth","naturalHeight","aspectRatio","type","imageSRC","base64SRC","result","resolve","image","Image","onload","e","size","target","imageDetail","src","originalSRC","originalHeight","originalWidth","file","tempImages","elem","value","CollageView","collageID","useParams","getCollage","handleImageCount","handleNewImageCount","time","collageapi","details","images","length","imageDets","timeEnd","clearCollage","saveType"],"sourceRoot":""}