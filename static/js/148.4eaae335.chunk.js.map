{"version":3,"file":"static/js/148.4eaae335.chunk.js","mappings":"oPAKA,SAASA,EAAYC,EAASC,EAAaC,GACzC,OAAO,IAAIC,SAAQ,SAACC,GAClB,IAAMC,EAAQ,IAAIC,MAClBD,EAAME,OAAS,SAACC,GACd,MAAwCA,EAAEC,OACpCC,EADc,EAAZC,aAA2B,EAAbC,cAEdC,EAAgBb,EAAhBa,MAAOC,EAASd,EAATc,KAOTC,EAAa,CACjBF,MAAAA,EACAG,IARcC,EAAAA,EAAAA,eACdZ,EACAJ,EACAA,EAAcS,EACdI,GAKAF,cAAeX,EAAcS,EAC7BC,aAAcV,EACdS,YAAAA,EACAI,KAAAA,GAEFV,EAAQ,CAAEJ,QAAAA,EAASe,WAAAA,IACnBb,EAAmBa,EAAYf,EACjC,EACAK,EAAMW,IAAMhB,EAAQgB,GACtB,GACF,CAEe,SAASE,IACtB,IACQC,GADOC,EAAAA,EAAAA,MACPD,UAEFE,EAAU,yCAAG,WACjBC,EACAC,EACAC,EACAtB,GAAkB,oGAEIuB,EAAAA,EAAAA,WAAsBN,GAAW,KAAD,EAGV,OAHtCO,EAAO,OACPC,EAAWD,EAAQA,QACzBH,EAAiBI,EAASC,OAAOC,QACjCL,EAAoBG,EAASC,OAAOC,QAAQ,SACnB1B,QAAQ2B,WAC/BH,EAASC,OAAOG,IAAG,yCAAC,WAAOC,GAAG,4EACQ,OAA9BhB,EAAMU,EAAQO,KAAKD,EAAInB,OAAM,kBAC5BqB,MAAMlB,GACVmB,MAAK,SAACC,GAAI,OAAKA,EAAKC,MAAM,IAC1BF,MAAK,SAACG,GACL,IAAMtC,GAAO,kBAAQgC,GAAG,IAAEhB,IAAKsB,IAE/B,OADAC,QAAQC,IAAI,YAAaxC,EAAQa,OAC1Bd,EAAYC,EAASsB,EAAkBpB,EAChD,KAAE,2CACL,mDATkB,KAUnB,KAAD,EAQE,OAnBGuC,EAAU,OAahBF,QAAQC,IAAI,cAAeC,GACrBb,EAAS,GACTc,EAAiB,GACvBD,EAAWE,SAAQ,SAACC,GAClBhB,EAAOiB,KAAKD,EAAKE,MAAM/B,YACvB2B,EAAeG,KAAKD,EAAKE,MAAM9C,QACjC,IAAG,kBACI,CAAE0B,QAASC,EAAUC,OAAAA,EAAQc,eAAAA,IAAgB,4CACrD,gBA/Be,4CAiChB,OACE,SAAC,UAAW,CACVrB,WAAYA,EACZ0B,aAAc,kBAAMtB,EAAAA,EAAAA,cAAyBN,EAAU,EACvD6B,SAAS,YAGf,C","sources":["pages/collage/View.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport collageapi from 'api/collage';\nimport helpers from 'components/collage/helpers';\nimport BaseCollage from 'pages/collage/Base';\n\nfunction resizeImage(origImg, resizeWidth, handleImageDetails) {\n  return new Promise((resolve) => {\n    const image = new Image();\n    image.onload = (e) => {\n      const { naturalWidth, naturalHeight } = e.target;\n      const aspectRatio = naturalWidth / naturalHeight;\n      const { title, type } = origImg;\n      const dataurl = helpers.downscaleImage(\n        image,\n        resizeWidth,\n        resizeWidth / aspectRatio,\n        type\n      );\n      const resizedImg = {\n        title,\n        src: dataurl,\n        naturalHeight: resizeWidth / aspectRatio,\n        naturalWidth: resizeWidth,\n        aspectRatio,\n        type,\n      };\n      resolve({ origImg, resizedImg });\n      handleImageDetails(resizedImg, origImg);\n    };\n    image.src = origImg.src;\n  });\n}\n\nexport default function CollageView() {\n  const params = useParams();\n  const { collageID } = params;\n\n  const getCollage = async (\n    resizeImageWidth,\n    handleImageCount,\n    handleNewImageCount,\n    handleImageDetails\n  ) => {\n    const details = await collageapi.getCollage(collageID);\n    const collDets = details.details;\n    handleImageCount(collDets.images.length);\n    handleNewImageCount(collDets.images.length);\n    const tempImages = await Promise.allSettled(\n      collDets.images.map(async (img) => {\n        const src = details.urls[img.title];\n        return fetch(src)\n          .then((resp) => resp.text())\n          .then((imgSRC) => {\n            const origImg = { ...img, src: imgSRC };\n            console.log('i am here', origImg.title);\n            return resizeImage(origImg, resizeImageWidth, handleImageDetails);\n          });\n      })\n    );\n\n    console.log('temp images', tempImages);\n    const images = [];\n    const originalImages = [];\n    tempImages.forEach((elem) => {\n      images.push(elem.value.resizedImg);\n      originalImages.push(elem.value.origImg);\n    });\n    return { details: collDets, images, originalImages };\n  };\n\n  return (\n    <BaseCollage\n      getCollage={getCollage}\n      clearCollage={() => collageapi.deleteCollage(collageID)}\n      saveType=\"existing\"\n    />\n  );\n}\n"],"names":["resizeImage","origImg","resizeWidth","handleImageDetails","Promise","resolve","image","Image","onload","e","target","aspectRatio","naturalWidth","naturalHeight","title","type","resizedImg","src","helpers","CollageView","collageID","useParams","getCollage","resizeImageWidth","handleImageCount","handleNewImageCount","collageapi","details","collDets","images","length","allSettled","map","img","urls","fetch","then","resp","text","imgSRC","console","log","tempImages","originalImages","forEach","elem","push","value","clearCollage","saveType"],"sourceRoot":""}