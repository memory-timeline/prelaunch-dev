{"version":3,"file":"static/js/870.0d74cb5a.chunk.js","mappings":"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","sources":["api/collage.jsx","api/helpers.js","pages/collage/List.jsx"],"sourcesContent":["import helpers from 'api/helpers';\n\nfunction newCollage(collageID, collageDetails) {\n  try {\n    const path = '/api/collage/new';\n    const params = { collage_id: collageID };\n    const authURL = process.env.REACT_APP_AUTH_URL;\n    return helpers.post(authURL, path, params, JSON.stringify(collageDetails));\n  } catch (error) {\n    /* eslint-disable no-console */\n    console.log(error);\n    return error;\n  }\n}\n\nasync function upload(url, body) {\n  try {\n    const params = { body, method: 'PUT' };\n    const resp = await fetch(url, params).then((response) => response);\n    return resp;\n  } catch (error) {\n    /* eslint-disable no-console */\n    console.log(error);\n    return error;\n  }\n}\n\nfunction listCollages(nextToken) {\n  try {\n    const path = '/api/collage/list';\n    const params = { next_token: nextToken };\n    const authURL = process.env.REACT_APP_AUTH_URL;\n    return helpers.get(authURL, path, params);\n  } catch (error) {\n    /* eslint-disable no-console */\n    console.log(error);\n    return error;\n  }\n}\n\nfunction getThumbnail(collageId) {\n  try {\n    const path = '/api/collage/thumbnail';\n    const params = { collage_id: collageId };\n    const authURL = process.env.REACT_APP_AUTH_URL;\n    return helpers.get(authURL, path, params);\n  } catch (error) {\n    /* eslint-disable no-console */\n    console.log(error);\n    return error;\n  }\n}\n\nexport default { newCollage, upload, listCollages, getThumbnail };\n","const get = async (url, path, params = {}) => {\n  let newUrl = `https://${url}${path}`;\n  const options = {\n    method: 'GET',\n    credentials: 'include',\n    headers: new Headers({ 'content-type': 'application/json' }),\n  };\n  newUrl += `?${new URLSearchParams(params).toString()}`;\n  const resp = await fetch(newUrl, options);\n  if (!resp.ok) {\n    if (resp.status === 401) {\n      document.cookie =\n        'userInfo=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n      return { status: 'unauthenticated' };\n    }\n    if (resp.status === 403) {\n      return { status: 'forbidden' };\n    }\n  }\n\n  return resp.json();\n};\n\nconst post = async (url, path, params, body) => {\n  let apiUrl = `https://${url}${path}`;\n  apiUrl += `?${new URLSearchParams(params).toString()}`;\n  const options = {\n    method: 'POST',\n    credentials: 'include',\n    headers: new Headers({ 'content-type': 'application/json' }),\n    body,\n  };\n  return fetch(apiUrl, options).then((response) => {\n    if (!response.ok) {\n      return { status: 'error' };\n    }\n    return response.json();\n  });\n};\n\nexport default { get, post };\n","import { useState, useEffect } from 'react';\nimport collageapi from 'api/collage';\n\nexport default function ListCollages() {\n  const [nextToken, setNextToken] = useState('');\n  const [thumbnails, setThumbnails] = useState([]);\n\n  useEffect(async () => {\n    const collages = await collageapi.listCollages(nextToken);\n    const collagePromises = collages.collage_ids.map((collage) =>\n      collageapi.getThumbnail(collage)\n    );\n    setNextToken(collages.next_token);\n    const collThumbs = await Promise.allSettled(collagePromises);\n    setThumbnails(collThumbs);\n    console.log(collages, thumbnails);\n  }, []);\n\n  return <div>List Collages</div>;\n}\n"],"names":["url","body","params","method","fetch","then","response","resp","console","log","newCollage","collageID","collageDetails","collage_id","helpers","process","JSON","stringify","error","upload","listCollages","nextToken","next_token","getThumbnail","collageId","get","path","newUrl","options","credentials","headers","Headers","URLSearchParams","toString","ok","status","document","cookie","json","post","apiUrl","ListCollages","useState","setNextToken","thumbnails","setThumbnails","useEffect","collageapi","collages","collagePromises","collage_ids","map","collage","Promise","allSettled","collThumbs"],"sourceRoot":""}