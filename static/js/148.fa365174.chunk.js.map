{"version":3,"file":"static/js/148.fa365174.chunk.js","mappings":"oPA6CA,SAEeA,EAAU,EAAD,iDAevB,OAfuB,0BAAxB,WAAyBC,EAASC,EAAMC,GAAkB,4FAC/BC,QAAQC,WAC/BJ,EAAQK,IAAG,yCAAC,WAAOC,GAAG,8FACGC,MAAMN,EAAKK,EAAIE,QAAQC,MAAK,SAACC,GAAI,OAAKA,EAAKC,MAAM,IAAE,KAAD,EAGjE,OAHFC,EAAQ,OACdC,QAAQC,IAAI,YAAaF,GAAU,yBAE9BN,GAAG,iBACKS,EAAAA,EAAAA,cAAsBH,GAAS,OAGjB,OAHiB,iBACpCA,EAAQ,MADdI,IAAI,EAAD,GACHC,KAAK,EAAD,IAHAC,GAAM,wBAKZhB,EAAmBgB,GAAQ,kBACpBA,GAAM,4CACd,mDAVU,KAWX,KAAD,EAZe,OAAVC,EAAU,yBAaTA,EAAWd,KAAI,SAACe,GAAI,OAAKA,EAAKC,KAAK,KAAC,2CAC5C,wBAEc,SAASC,IACtB,IACQC,GADOC,EAAAA,EAAAA,MACPD,UAEFE,EAAU,yCAAG,WACjBC,EACAC,EACAzB,GAAkB,8EAEmC,OAArDW,QAAQC,IAAI,yCAAyC,SAC/Bc,EAAAA,EAAAA,WAAsBL,GAAW,KAAD,EAEH,OAF7CM,EAAO,OACbH,EAAiBG,EAAQA,QAAQC,OAAOC,QACxCJ,EAAoBE,EAAQA,QAAQC,OAAOC,QAAQ,SAC9BhC,EACnB8B,EAAQA,QAAQC,OAChBD,EAAQ5B,KACRC,GACA,KAAD,EAJW,OAAN4B,EAAM,yBAML,CAAED,QAASA,EAAQA,QAASC,OAAAA,IAAQ,4CAC5C,gBAhBe,0CAkBhB,OACE,SAAC,UAAW,CACVL,WAAYA,EACZO,aAAc,kBAAMJ,EAAAA,EAAAA,cAAyBL,EAAU,EACvDU,SAAS,YAGf,C","sources":["pages/collage/View.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport collageapi from 'api/collage';\nimport helpers from 'components/collage/helpers';\nimport BaseCollage from 'pages/collage/Base';\n\n// async function resizeCollageImages(\n//   imageArr,\n//   resizeWidth,\n//   handleImageCount,\n//   handleNewImageCount,\n//   handleImageDetails\n// ) {\n//   handleImageCount(imageArr.length);\n//   handleNewImageCount(imageArr.length);\n//   const imgs = await Promise.allSettled(\n//     imageArr.map(async (imageElem) => {\n//       const result = new Promise((resolve) => {\n//         const image = new Image();\n//         image.onload = (e) => {\n//           const { naturalWidth, naturalHeight } = e.target;\n//           const aspectRatio = naturalWidth / naturalHeight;\n//           const { title, type } = imageElem;\n//           const dataurl = helpers.downscaleImage(\n//             image,\n//             resizeWidth,\n//             resizeWidth / aspectRatio,\n//             type\n//           );\n//           const resizedImageDet = {\n//             title,\n//             src: dataurl,\n//             naturalHeight: resizeWidth / aspectRatio,\n//             naturalWidth: resizeWidth,\n//             aspectRatio,\n//             type,\n//           };\n//           resolve(resizedImageDet);\n//           handleImageDetails(resizedImageDet, imageElem);\n//         };\n//         image.src = imageElem.src;\n//       });\n//       return result;\n//     })\n//   );\n//   return imgs.map((elem) => elem.value);\n// }\n\nasync function getImages(imgDets, urls, handleImageDetails) {\n  const tempImages = await Promise.allSettled(\n    imgDets.map(async (img) => {\n      const imageSRC = await fetch(urls[img.title]).then((resp) => resp.text());\n      console.log('image SRC', imageSRC);\n      const imgDet = {\n        ...img,\n        src: await helpers.convertBase64(imageSRC),\n        file: imageSRC,\n      };\n      handleImageDetails(imgDet);\n      return imgDet;\n    })\n  );\n  return tempImages.map((elem) => elem.value);\n}\n\nexport default function CollageView() {\n  const params = useParams();\n  const { collageID } = params;\n\n  const getCollage = async (\n    handleImageCount,\n    handleNewImageCount,\n    handleImageDetails\n  ) => {\n    console.log('use effect making call to get collage');\n    const details = await collageapi.getCollage(collageID);\n    handleImageCount(details.details.images.length);\n    handleNewImageCount(details.details.images.length);\n    const images = await getImages(\n      details.details.images,\n      details.urls,\n      handleImageDetails\n    );\n    // images.map((img) => handleImageDetails(img));\n    return { details: details.details, images };\n  };\n\n  return (\n    <BaseCollage\n      getCollage={getCollage}\n      clearCollage={() => collageapi.deleteCollage(collageID)}\n      saveType=\"existing\"\n    />\n  );\n}\n"],"names":["getImages","imgDets","urls","handleImageDetails","Promise","allSettled","map","img","fetch","title","then","resp","text","imageSRC","console","log","helpers","src","file","imgDet","tempImages","elem","value","CollageView","collageID","useParams","getCollage","handleImageCount","handleNewImageCount","collageapi","details","images","length","clearCollage","saveType"],"sourceRoot":""}