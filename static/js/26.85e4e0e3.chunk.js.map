{"version":3,"file":"static/js/26.85e4e0e3.chunk.js","mappings":"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","sources":["pages/MemoryThumbnail.jsx","pages/MemoryThumbnailCard.jsx","pages/memories/MemoryItemLoading.jsx","pages/memories/MemoryGrid.jsx","pages/memories/CreateMemoryItem.jsx","pages/memories/LoadMore.jsx","pages/memories/GridView.jsx","pages/memories/Own.jsx","components/NoMemories.jsx","pages/memories/Shared.jsx","components/ActionButton.jsx","components/ReviewCard.jsx","components/ReviewItem.jsx","components/MemoryReviewCarousel.jsx","components/OwnerInfo.jsx","pages/memories/Review.jsx","pages/memories/Memories.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport CardMedia from '@mui/material/CardMedia';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport Typography from '@mui/material/Typography';\nimport Chip from '@mui/material/Chip';\nimport MemoryThumbnailCard from './MemoryThumbnailCard';\n\nfunction ThumbnailImage({\n  imageSrc, imageSrcSet, title, handleImageLoad,\n}) {\n  return (\n    <CardMedia\n      component=\"img\"\n      src={imageSrc}\n      srcSet={imageSrcSet}\n      alt={title}\n      sx={{\n        textAlign: 'center',\n        objectFit: 'cover',\n        height: {\n          lg: 350,\n          md: 300,\n          xs: 250,\n        },\n      }}\n      onLoad={handleImageLoad}\n    />\n  );\n}\n\nfunction ThumbnailDetails({\n  title, date, avatar, shared,\n}) {\n  return (\n    <CardContent>\n      <CardHeader\n        disableTypography\n        avatar={avatar}\n        title={(\n          <Typography\n            noWrap\n            sx={{\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              width: { xs: 'calc(75%)', sm: 'calc(100%)' },\n              fontWeight: 600,\n            }}\n          >\n            {title}\n            {\n              shared !== '' ? (\n                <>\n                  {' '}\n                  <Chip\n                    label={shared}\n                    size=\"small\"\n                    variant=\"filled\"\n                    color={(shared === 'Shared') ? 'success' : 'default'}\n                    sx={{ height: 'auto' }}\n                  />\n                </>\n              ) : null\n            }\n\n          </Typography>\n        )}\n        subheader={<Typography sx={{ color: 'muted.main' }}>{date}</Typography>}\n        sx={{\n          padding: 0,\n          color: 'faded.black',\n        }}\n      />\n    </CardContent>\n  );\n}\n\nexport default function MemoryThumbnail({\n  title,\n  date,\n  avatar,\n  shared,\n  thumbnailImage,\n  thumbnailImageSrcSet,\n  handleClick,\n  handleImageLoad,\n}) {\n  return (\n    <MemoryThumbnailCard handleClick={handleClick}>\n      <ThumbnailImage\n        imageSrc={thumbnailImage}\n        imageSrcSet={thumbnailImageSrcSet}\n        title={title}\n        handleImageLoad={handleImageLoad}\n      />\n      <ThumbnailDetails title={title} date={date} avatar={avatar} shared={shared} />\n    </MemoryThumbnailCard>\n  );\n}\n\nThumbnailDetails.defaultProps = {\n  title: 'Memory Thumbnail Image',\n  date: 'Memory Date',\n  avatar: '',\n  shared: '',\n};\n\nThumbnailDetails.propTypes = {\n  title: PropTypes.string,\n  date: PropTypes.string,\n  avatar: PropTypes.node,\n  shared: PropTypes.string,\n};\n\nThumbnailImage.defaultProps = {\n  title: 'Memory Thumbnail Image',\n  imageSrc: '',\n  imageSrcSet: '',\n  handleImageLoad: () => {},\n};\n\nThumbnailImage.propTypes = {\n  title: PropTypes.string,\n  imageSrc: PropTypes.string,\n  imageSrcSet: PropTypes.string,\n  handleImageLoad: PropTypes.func,\n};\n\nMemoryThumbnail.defaultProps = {\n  thumbnailImageSrcSet: '',\n  handleImageLoad: () => {},\n  avatar: '',\n  shared: '',\n};\n\nMemoryThumbnail.propTypes = {\n  title: PropTypes.oneOfType([PropTypes.element, PropTypes.string]).isRequired,\n  date: PropTypes.oneOfType([PropTypes.element, PropTypes.string]).isRequired,\n  avatar: PropTypes.node,\n  shared: PropTypes.string,\n  thumbnailImage: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  thumbnailImageSrcSet: PropTypes.string,\n  handleImageLoad: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport Card from '@mui/material/Card';\nimport CardActionArea from '@mui/material/CardActionArea';\n//  import { useTheme, alpha } from '@mui/material/styles';\n\nexport default function MemoryThumbnailCard({ handleClick, children }) {\n  //  const theme = useTheme();\n\n  return (\n    <CardActionArea onClick={handleClick}>\n      <Card\n        elevation={2}\n        sx={{\n          bgcolor: '#fff',\n          borderRadius: 5,\n          // border: '2px solid gray',\n          color: 'black',\n          position: 'relative',\n          height: {\n            lg: 430,\n            md: 380,\n            xs: 330,\n          },\n          '&:hover': {\n            border: 3,\n            borderColor: 'secondary.main',\n            elevation: 0,\n          },\n        }}\n      >\n        {children}\n      </Card>\n    </CardActionArea>\n  );\n}\n\nMemoryThumbnailCard.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import Grid from '@mui/material/Grid';\nimport PropTypes from 'prop-types';\nimport Skeleton from '@mui/material/Skeleton';\nimport MemoryThumbnail from 'pages/MemoryThumbnail';\nimport imageLoading from 'static/images/image-loading.png';\n\nexport default function MemoryItemLoading({ memory }) {\n  return (\n    <Grid item key={memory} lg={3} md={4} sm={6} xs={12} sx={{ p: 1 }}>\n      <MemoryThumbnail\n        title={<Skeleton type=\"rectangular\" sx={{ width: '60%' }} />}\n        date={<Skeleton type=\"rectangular\" sx={{ width: '50%' }} />}\n        thumbnailImage={imageLoading}\n        handleClick={() => {}}\n      />\n    </Grid>\n  );\n}\n\nMemoryItemLoading.propTypes = {\n  memory: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Grid from '@mui/material/Grid';\n\nexport default function MemoryGrid({ children }) {\n  return (\n    <Grid\n      container\n      sx={{ bgcolor: 'button.main', py: 1 }}\n      justifyContent=\"left\"\n      alignItems=\"flex-start\"\n    >\n      {children}\n    </Grid>\n  );\n}\n\nMemoryGrid.defaultProps = {\n  children: '',\n};\n\nMemoryGrid.propTypes = {\n  children: PropTypes.node,\n};\n","import { useNavigate } from 'react-router-dom';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport AddOutlinedIcon from '@mui/icons-material/AddOutlined';\n\nimport MemoryThumbnailCard from '../MemoryThumbnailCard';\n\nexport default function CreateMemoryItem() {\n  const navigate = useNavigate();\n  const belowmd = useMediaQuery((theme) => theme.breakpoints.down('md'));\n\n  const handleClick = () => {\n    navigate('/memory/create');\n  };\n\n  return (\n    <Grid\n      item\n      key=\"creatememory\"\n      lg={3}\n      md={4}\n      sm={6}\n      xs={12}\n      sx={{ p: 1 }}\n    >\n      <MemoryThumbnailCard handleClick={handleClick}>\n        <Typography\n          variant={belowmd ? 'body1' : 'h5'}\n          color=\"button.main\"\n          sx={{\n            p: 1,\n            color: 'secondary.main',\n            bgcolor: 'primary.main',\n            borderRadius: '0px 10px 10px 0px',\n            borderColor: 'secondary.main',\n            position: 'absolute',\n            bottom: 15,\n            left: 0,\n          }}\n        >\n          Create a memory\n        </Typography>\n        <AddOutlinedIcon\n          sx={{\n            position: 'absolute',\n            border: 3,\n            borderRadius: '50%',\n            fontSize: '7.5rem',\n            left: '50%',\n            top: '50%',\n            transform: 'translate(-50%, -50%)',\n            color: 'muted.main',\n          }}\n        />\n      </MemoryThumbnailCard>\n    </Grid>\n  );\n}\n","import PropTypes from 'prop-types';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\n\nimport MemoryThumbnailCard from '../MemoryThumbnailCard';\n\nexport default function LoadMore({ handleMoreClick }) {\n  return (\n    <Grid\n      item\n      key=\"creatememory\"\n      lg={3}\n      md={4}\n      xs={6}\n      sx={{ p: 1 }}\n    >\n      <MemoryThumbnailCard handleClick={handleMoreClick}>\n        <Typography\n          variant=\"h5\"\n          sx={{\n            p: 2,\n            color: 'secondary.main',\n            bgcolor: 'primary.main',\n            borderRadius: { md: 10, xs: '50%' },\n            borderColor: 'secondary.main',\n            position: 'absolute',\n            bottom: '50%',\n            left: '50%',\n            transform: 'translate(-50%, +50%)',\n            textAlign: 'center',\n          }}\n        >\n          Load More\n        </Typography>\n      </MemoryThumbnailCard>\n    </Grid>\n  );\n}\n\nLoadMore.propTypes = {\n  handleMoreClick: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Grid from '@mui/material/Grid';\nimport { ProfileAvatar } from 'components/profile';\nimport MemoryThumbnail from '../MemoryThumbnail';\n\nimport CreateMemoryItem from './CreateMemoryItem';\nimport LoadMore from './LoadMore';\n\nexport default function GridView({\n  memories, handleMoreClick, nextToken, handleImageLoad, create, handleClick,\n}) {\n  const sortedMemories = memories.sort((a, b) => (a.memory_id > b.memory_id ? 1 : -1));\n\n  const getThumbnailSrcSet = (thumbnailImage) => {\n    const srcSetList = thumbnailImage.images ? thumbnailImage.images.map(({ src, width }) => `${src} ${width}w`) : [];\n    return srcSetList.join(',');\n  };\n\n  return (\n    <Grid container sx={{ bgcolor: 'button.main', py: 1 }} justifyContent=\"left\" alignItems=\"flex-start\">\n      {(create || (memories.length === 0)) ? <CreateMemoryItem /> : null}\n      {sortedMemories.map((memory) => (\n        <Grid\n          item\n          key={memory.title}\n          lg={3}\n          md={4}\n          sm={6}\n          xs={12}\n          sx={{ p: 1 }}\n        >\n          <MemoryThumbnail\n            title={memory.title}\n            date={memory.date}\n            avatar={memory.owner ? (\n              <ProfileAvatar\n                name={memory.owner.name}\n                picture={memory.owner.picture}\n                email={memory.owner.email}\n              />\n            ) : null}\n            shared={memory.shared}\n            thumbnailImage={memory.photo.src}\n            thumbnailImageSrcSet={getThumbnailSrcSet(memory.photo)}\n            handleClick={() => handleClick(memory)}\n            handleImageLoad={handleImageLoad}\n          />\n        </Grid>\n      ))}\n      { nextToken && (<LoadMore handleMoreClick={handleMoreClick} />) }\n    </Grid>\n  );\n}\n\nGridView.defaultProps = {\n  memories: [],\n};\n\nGridView.propTypes = {\n  create: PropTypes.bool.isRequired,\n  memories: PropTypes.arrayOf(\n    PropTypes.shape({\n      memory_id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      date: PropTypes.string.isRequired,\n      photo: PropTypes.arrayOf(PropTypes.shape({\n        key: PropTypes.string,\n        src: PropTypes.string,\n        title: PropTypes.string,\n        alt: PropTypes.string,\n        width: PropTypes.number,\n        height: PropTypes.number,\n      })),\n    }),\n  ),\n  nextToken: PropTypes.string.isRequired,\n  handleMoreClick: PropTypes.func.isRequired,\n  handleImageLoad: PropTypes.func.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n","import { useNavigate } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Box from '@mui/material/Box';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport MemoryItemLoading from 'pages/memories/MemoryItemLoading';\nimport MemoryGrid from 'pages/memories/MemoryGrid';\nimport GridView from './GridView';\nimport api from '../Api';\nimport CreateMemoryItem from './CreateMemoryItem';\n\nasync function getMemories(\n  handleMemoryCallback,\n  handleTokenCallback,\n  handleThumbnailCallback,\n  nextToken = '',\n) {\n  try {\n    const resp = await api.getMemories(nextToken);\n    if (resp) {\n      if (resp.memories) {\n        handleThumbnailCallback(resp.memories);\n        const thumbnails = await Promise.all(\n          api.getThumbnails(resp.memories),\n        );\n        handleMemoryCallback(thumbnails);\n        handleTokenCallback(resp.next_continuation_token || '');\n      }\n    }\n  } catch (error) {\n    /* eslint-disable no-console */\n    console.log(error);\n  }\n}\n\nexport default function OwnMemories() {\n  const [nextToken, setNextToken] = useState('');\n  const [memoryIDs, setMemoryIDs] = useState([]);\n  const [memories, setMemories] = useState([]);\n  const [count, setCount] = useState(0);\n  const [grid, setGrid] = useState(null);\n  const navigate = useNavigate();\n  const aboveSM = useMediaQuery((theme) => theme.breakpoints.up('sm'));\n\n  const handleClick = (memDetails) => {\n    navigate(`/memory/${memDetails.memory_id}`, { state: memDetails });\n  };\n\n  const picLoaded = () => setCount((cnt) => cnt + 1);\n  const handleTokenChange = (newToken) => setNextToken(newToken);\n  const addMemories = (details) => setMemories((arr) => arr.concat(details));\n  const addMemoryIDs = (ids) => setMemoryIDs((arr) => arr.concat(ids));\n\n  useEffect(() => getMemories(addMemories, handleTokenChange, addMemoryIDs, nextToken), []);\n\n  function GetThumbnailGrid() {\n    console.log('above sm', aboveSM);\n    const thumbnailGrid = (\n      <GridView\n        create={aboveSM}\n        memories={memories}\n        nextToken={nextToken}\n        handleMoreClick={() => getMemories(\n          addMemories,\n          handleTokenChange,\n          addMemoryIDs,\n          nextToken,\n        )}\n        handleImageLoad={picLoaded}\n        handleClick={handleClick}\n      />\n    );\n    setGrid(thumbnailGrid);\n  }\n\n  useEffect(() => GetThumbnailGrid(), [memories, nextToken, aboveSM]);\n\n  console.log('I am in own memory', memories);\n\n  return (memories.length === memoryIDs.length) && (count >= memoryIDs.length) ? (\n    grid\n  ) : (\n    <>\n      <MemoryGrid>\n        {aboveSM ? <CreateMemoryItem /> : null}\n        {memoryIDs.map((memory) => <MemoryItemLoading memory={memory} />)}\n      </MemoryGrid>\n\n      <Box component=\"div\" sx={{ display: 'none' }}>\n        {grid}\n      </Box>\n    </>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { useNavigate } from 'react-router-dom';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport { ReactComponent as Logo } from 'static/images/icons/logo.svg';\n\nexport default function NoMemories({ message }) {\n  const navigate = useNavigate();\n  const handleClick = () => navigate('/memory/create');\n\n  return (\n    <Stack\n      direction=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      sx={{\n        width: '95%',\n        maxWidth: '500px',\n        position: 'fixed',\n        top: '50%',\n        right: '50%',\n        transform: 'translate(50%, -50%)',\n        border: '2px solid gray',\n        height: '60%',\n        borderRadius: '10px',\n      }}\n    >\n      <Logo fill=\"gray\" width=\"64px\" height=\"64px\" />\n      <Typography color=\"gray\" sx={{ fontSize: '1.3rem' }}>\n        {message}\n      </Typography>\n      <Typography color=\"gray\" sx={{ pb: 8, fontSize: '1.3rem' }}>\n        Check again later.\n      </Typography>\n      <Typography color=\"primary\">\n        In the mean time, you can\n      </Typography>\n      <Button variant=\"contained\" onClick={handleClick}>Create a Memory</Button>\n    </Stack>\n  );\n}\n\nNoMemories.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Box from '@mui/material/Box';\nimport MemoryItemLoading from 'pages/memories/MemoryItemLoading';\nimport MemoryGrid from 'pages/memories/MemoryGrid';\nimport NoMemories from 'components/NoMemories';\nimport GridView from './GridView';\nimport api from '../Api';\n\nasync function getAcceptedMemories(\n  handleMemoryCallback,\n  handleTokenCallback,\n  handleThumbnailCallback,\n  nextToken = '',\n) {\n  try {\n    const resp = await api.getAcceptedMemories(nextToken);\n    if (resp) {\n      if (resp.memories) {\n        handleThumbnailCallback(resp.memories);\n        const thumbnails = await Promise.all(\n          api.getAcceptedThumbnails(resp.memories),\n        );\n        handleMemoryCallback(thumbnails);\n        handleTokenCallback(resp.next_continuation_token || '');\n      }\n    }\n  } catch (error) {\n    /* eslint-disable no-console */\n    console.log(error);\n  }\n}\n\nexport default function SharedMemories() {\n  const [nextToken, setNextToken] = useState('');\n  const [memoryIDs, setMemoryIDs] = useState([]);\n  const [memories, setMemories] = useState([]);\n  const [count, setCount] = useState(0);\n  const [grid, setGrid] = useState(null);\n  const navigate = useNavigate();\n\n  const handleClick = (memDetails) => {\n    navigate(`/memory/shared/${memDetails.memory_id}`, { state: memDetails });\n  };\n\n  const picLoaded = () => setCount((cnt) => cnt + 1);\n  const handleTokenChange = (newToken) => setNextToken(newToken);\n\n  const addMemories = (details) => {\n    details.map((detail) => {\n      const memDetails = detail.thumbnail;\n      memDetails.owner = detail.owner_details;\n      console.log('combined shared memory details', memDetails);\n      setMemories((arr) => arr.concat([memDetails]));\n      return 0;\n    });\n  };\n\n  const addMemoryIDs = (ids) => setMemoryIDs((arr) => arr.concat(ids));\n\n  useEffect(() => getAcceptedMemories(addMemories, handleTokenChange, addMemoryIDs, nextToken), []);\n\n  function GetThumbnailGrid() {\n    if (memories.length > 0) {\n      const thumbnailGrid = (\n        <GridView\n          create={false}\n          memories={memories}\n          nextToken={nextToken}\n          handleMoreClick={() => getAcceptedMemories(\n            addMemories,\n            handleTokenChange,\n            addMemoryIDs,\n            nextToken,\n          )}\n          handleImageLoad={picLoaded}\n          handleClick={handleClick}\n        />\n      );\n      setGrid(thumbnailGrid);\n    } else {\n      setGrid(<NoMemories message=\"No shared memories right now.\" />);\n    }\n  }\n\n  useEffect(() => GetThumbnailGrid(), [memories, nextToken]);\n\n  return (memories.length === memoryIDs.length) && (count >= memoryIDs.length) ? (\n    grid\n  ) : (\n    <>\n      <MemoryGrid>\n        {memoryIDs.map((memory) => <MemoryItemLoading memory={memory} />)}\n      </MemoryGrid>\n\n      <Box component=\"div\" sx={{ display: 'none' }}>\n        {grid}\n      </Box>\n    </>\n  );\n}\n","import PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\nexport default function ActionButton({ label, handleClick, color }) {\n  return (\n    <Button\n      variant=\"contained\"\n      color={color}\n      sx={{ m: 1 }}\n      onClick={handleClick}\n    >\n      <Typography variant=\"h6\">\n        {label}\n      </Typography>\n    </Button>\n  );\n}\n\nActionButton.propTypes = {\n  label: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  color: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Card from '@mui/material/Card';\nimport CardActionArea from '@mui/material/CardActionArea';\n\nexport default function ReviewCard({ handleClick, children }) {\n  return (\n    <CardActionArea onClick={handleClick}>\n      <Card\n        elevation={0}\n        sx={{\n          bgcolor: '#fff',\n          borderRadius: 5,\n          position: 'relative',\n        }}\n      >\n        {children}\n      </Card>\n    </CardActionArea>\n  );\n}\n\nReviewCard.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport CardMedia from '@mui/material/CardMedia';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport Typography from '@mui/material/Typography';\nimport ReviewCard from './ReviewCard';\n\nfunction ReviewImage({\n  imageSrc, imageSrcSet, title, handleImageLoad,\n}) {\n  return (\n    <CardMedia\n      component=\"img\"\n      src={imageSrc}\n      srcSet={imageSrcSet}\n      alt={title}\n      sx={{\n        borderColor: 'muted.main',\n        borderRadius: 4,\n        textAlign: 'center',\n        objectFit: 'cover',\n        height: {\n          lg: 400,\n          sm: 350,\n          xs: 350,\n        },\n      }}\n      onLoad={handleImageLoad}\n    />\n  );\n}\n\nfunction ReviewDetails({ title, date }) {\n  console.log('title, date', title, date);\n  return (\n    <CardContent>\n      <CardHeader\n        disableTypography\n        title={(\n          <Typography\n            noWrap\n            sx={{\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              width: { xs: 'calc(75%)', sm: 'calc(100%)' },\n              fontWeight: 600,\n            }}\n          >\n            {title}\n          </Typography>\n        )}\n        subheader={(\n          <Typography sx={{ color: 'muted.main' }}>{date}</Typography>\n        )}\n        sx={{\n          padding: 0,\n          color: 'faded.black',\n        }}\n      />\n    </CardContent>\n  );\n}\n\nexport default function ReviewItem({\n  title,\n  date,\n  thumbnailImage,\n  thumbnailImageSrcSet,\n  handleClick,\n  handleImageLoad,\n}) {\n  console.log('rendering review item');\n  return (\n    <ReviewCard handleClick={handleClick}>\n      <ReviewImage\n        imageSrc={thumbnailImage}\n        imageSrcSet={thumbnailImageSrcSet}\n        title={title}\n        handleImageLoad={handleImageLoad}\n      />\n      <ReviewDetails title={title} date={date} />\n    </ReviewCard>\n  );\n}\n\nReviewDetails.defaultProps = {\n  title: '',\n  date: '',\n};\n\nReviewDetails.propTypes = {\n  title: PropTypes.string,\n  date: PropTypes.string,\n};\n\nReviewImage.defaultProps = {\n  title: 'Review Image',\n  imageSrc: '',\n  imageSrcSet: '',\n  handleImageLoad: () => {},\n};\n\nReviewImage.propTypes = {\n  title: PropTypes.string,\n  imageSrc: PropTypes.string,\n  imageSrcSet: PropTypes.string,\n  handleImageLoad: PropTypes.func,\n};\n\nReviewItem.defaultProps = {\n  title: '',\n  date: '',\n  thumbnailImageSrcSet: '',\n  handleImageLoad: () => {},\n};\n\nReviewItem.propTypes = {\n  title: PropTypes.string,\n  date: PropTypes.string,\n  thumbnailImage: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  thumbnailImageSrcSet: PropTypes.string,\n  handleImageLoad: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport Carousel from 'react-material-ui-carousel';\nimport Stack from '@mui/material/Stack';\nimport ReviewItem from './ReviewItem';\n\nexport default function MemoryReviewCarousel({\n  memories, handleIndexChange, picIndex, handleImageLoad,\n}) {\n  const [carouselItems, setCarouselItems] = useState(memories);\n\n  useEffect(() => {\n    setCarouselItems(memories);\n  }, [memories]);\n\n  console.log('carousel items', carouselItems, picIndex);\n  const getThumbnailSrcSet = (thumbnailImage) => {\n    const srcSetList = thumbnailImage.images ? thumbnailImage.images.map(({ src, width }) => `${src} ${width}w`) : [];\n    return srcSetList.join(',');\n  };\n\n  return (\n    <Carousel\n      sx={{\n        maxWidth: '700px',\n        width: '95%',\n      }}\n      indicators={false}\n      index={picIndex}\n      onChange={(ind) => handleIndexChange(ind)}\n      navButtonsAlwaysVisible\n      autoPlay={false}\n    >\n      {carouselItems.map((mem) => (\n        <Stack\n          key={mem.thumbnail.memory_id}\n          direction=\"column\"\n          spacing={1}\n          alignItems=\"center\"\n        >\n          <ReviewItem\n            title={mem.thumbnail.title}\n            date={mem.thumbnail.date}\n            thumbnailImage={mem.thumbnail.photo.src}\n            thumbnailImageSrcSet={getThumbnailSrcSet(mem.thumbnail.photo)}\n            handleImageLoad={handleImageLoad}\n            handleClick={() => {}}\n          />\n        </Stack>\n      ))}\n    </Carousel>\n\n  );\n}\n\nMemoryReviewCarousel.propTypes = {\n  picIndex: PropTypes.number.isRequired,\n  handleIndexChange: PropTypes.func.isRequired,\n  handleImageLoad: PropTypes.func.isRequired,\n  memories: PropTypes.arrayOf(PropTypes.shape({\n    thumbnail: PropTypes.shape({\n      memory_id: PropTypes.number.isRequired,\n      title: PropTypes.oneOfType([PropTypes.element, PropTypes.string]).isRequired,\n      date: PropTypes.oneOfType([PropTypes.element, PropTypes.string]).isRequired,\n      photo: PropTypes.arrayOf(PropTypes.shape({\n        key: PropTypes.string,\n        src: PropTypes.string,\n        title: PropTypes.string,\n        alt: PropTypes.string,\n        width: PropTypes.number,\n        height: PropTypes.number,\n      })),\n    }),\n    owner_details: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      picture: PropTypes.string.isRequired,\n    }),\n  })).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\nimport { ProfileAvatar } from './profile';\n\nexport default function OwnerInfo({ name, email, picture }) {\n  return (\n    <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\" sx={{ width: '100%' }}>\n      <ProfileAvatar\n        name={name}\n        email={email}\n        picture={picture}\n      />\n      <Typography variant=\"h6\" sx={{ px: 1 }}>\n        {name}\n      </Typography>\n    </Stack>\n\n  );\n}\n\nOwnerInfo.propTypes = {\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport ActionButton from 'components/ActionButton';\nimport MemoryReviewCarousel from 'components/MemoryReviewCarousel';\nimport OwnerInfo from 'components/OwnerInfo';\nimport SimpleSnackbar from 'components/simple_snackbar';\nimport Skeleton from '@mui/material/Skeleton';\nimport imageLoading from 'static/images/image-loading.png';\nimport commonUtils from 'utils';\nimport NoMemories from 'components/NoMemories';\n\nimport api from 'pages/Api';\n\nasync function getReviewMemories(\n  handleMemoryCallback,\n  handleTokenCallback,\n  handleThumbnailCallback,\n  nextToken = '',\n) {\n  try {\n    const resp = await api.getPendingMemories(nextToken);\n    if (resp) {\n      if (resp.memories) {\n        handleThumbnailCallback(resp.memories);\n        /* eslint-disable no-console */\n        console.log('review memories', resp);\n        const thumbnails = await Promise.all(\n          api.getPendingThumbnails(resp.memories),\n        );\n        handleMemoryCallback(thumbnails);\n        handleTokenCallback(resp.next_continuation_token || '');\n      }\n    }\n  } catch (error) {\n    /* eslint-disable no-console */\n    console.log(error);\n  }\n}\n\nasync function acceptMemory(memoryID, handleAcceptCallback) {\n  try {\n    const userInfo = commonUtils.getUserInfo();\n    const resp = await api.acceptShare(memoryID, userInfo.email);\n    console.log(resp);\n    handleAcceptCallback(resp);\n  } catch (error) {\n    /* eslint-disable no-console */\n    console.log(error);\n  }\n}\n\nasync function rejectMemory(memoryID, handleRejectCallback) {\n  try {\n    const userInfo = commonUtils.getUserInfo();\n    const resp = await api.rejectShare(memoryID, userInfo.email);\n    console.log(resp);\n    handleRejectCallback(resp);\n  } catch (error) {\n    /* eslint-disable no-console */\n    console.log(error);\n  }\n}\n\nexport default function ReviewMemories({ memoryID }) {\n  const [count, setCount] = useState(0);\n  const [memoryIDs, setMemoryIDs] = useState([]);\n  const [picIndex, setPicIndex] = useState(0);\n  const [nextToken, setNextToken] = useState('');\n  const [pendingMemories, setPendingMemories] = useState([]);\n  const [grid, setGrid] = useState(null);\n\n  const [snack, setSnack] = useState(null);\n  const [snackMessage, setSnackMessage] = useState(null);\n  const [snackError, setSnackError] = useState(null);\n\n  useEffect(() => {\n    if (pendingMemories.length > 0) {\n      const index = pendingMemories.findIndex(\n        (elem) => elem.thumbnail.memory_id.toString() === memoryID,\n      );\n      console.log(memoryID, index);\n      if (index >= 0) {\n        setPicIndex(index);\n      } else {\n        setPicIndex(0);\n      }\n    }\n  }, [pendingMemories]);\n\n  console.log(memoryID);\n  const handleSnackMessage = (msg, error) => {\n    setSnack(true);\n    setSnackMessage(msg);\n    setSnackError(error);\n  };\n\n  const handleSnackBarClose = () => {\n    setSnack(false);\n    setSnackMessage(null);\n    setSnackError(null);\n  };\n\n  const handleTokenChange = (newToken) => setNextToken(newToken);\n  const picLoaded = () => setCount((cnt) => cnt + 1);\n\n  const addMemoryIDs = (ids) => setMemoryIDs((arr) => arr.concat(ids));\n  const addPendingMemories = (details) => setPendingMemories((arr) => arr.concat(details));\n  const handleMemoryRemove = () => {\n    const pmCount = pendingMemories.length;\n    console.log(pmCount, picIndex);\n    if (pmCount === 1) {\n      setPendingMemories([]);\n      setMemoryIDs([]);\n    } else {\n      const currentIndex = picIndex;\n      const memID = pendingMemories[picIndex].thumbnail.memory_id.toString();\n      const cleanedMemIds = memoryIDs.filter((e) => e.memory_id !== memID);\n      console.log(picIndex, memID, cleanedMemIds);\n      setMemoryIDs(cleanedMemIds);\n      if (currentIndex === (pmCount - 1)) {\n        setPicIndex((ind) => (ind - 1));\n      }\n      setPendingMemories([\n        ...pendingMemories.slice(0, currentIndex),\n        ...pendingMemories.slice(currentIndex + 1),\n      ]);\n    }\n  };\n\n  useEffect(() => {\n    getReviewMemories(addPendingMemories, handleTokenChange, addMemoryIDs, nextToken);\n  }, []);\n\n  const handleAcceptActionResults = (resp) => {\n    console.log('accept response', resp);\n    if (resp.ok) {\n      handleSnackMessage('Memory share accepted', false);\n      handleMemoryRemove();\n    } else {\n      handleSnackMessage('Error while accepting memory share', true);\n    }\n  };\n\n  const handleRejectActionResults = (resp) => {\n    console.log('reject response', resp);\n    if (resp.ok) {\n      handleSnackMessage('Memory share rejected', false);\n      handleMemoryRemove();\n    } else {\n      handleSnackMessage('Error while rejecting memory share', true);\n    }\n  };\n\n  const handleAccept = () => {\n    const memID = pendingMemories[picIndex].thumbnail.memory_id;\n    acceptMemory(memID, handleAcceptActionResults);\n    console.log('accepting memoryID', memID);\n  };\n\n  const handleReject = () => {\n    const memID = pendingMemories[picIndex].thumbnail.memory_id;\n    rejectMemory(memID, handleRejectActionResults);\n    console.log('rejecting memoryID', memID);\n  };\n\n  /* eslint-disable no-console */\n  console.log(\n    'pending memories', pendingMemories,\n    'picIndex', picIndex,\n    'memories count', pendingMemories.length,\n  );\n\n  function ReviewCarousel() {\n    if (pendingMemories.length > 0) {\n      const rc = (\n        <Box\n          sx={{\n            display: 'flex',\n            width: '100%',\n            backgroundColor: 'transparent',\n            backgroundSize: 'cover',\n            backgroundImage: 'linear-gradient(white, #0e516a)',\n            justifyContent: 'center',\n          }}\n        >\n          <Stack\n            direction=\"column\"\n            alignItems=\"center\"\n            sx={{ width: '100%', my: 3 }}\n          >\n            <OwnerInfo\n              name={pendingMemories.length > 0 ? pendingMemories[picIndex].owner_details.name : ''}\n              email={pendingMemories.length > 0 ? pendingMemories[picIndex].owner_details.email : 'P'}\n              picture={pendingMemories.length > 0 ? pendingMemories[picIndex].owner_details.picture : ''}\n            />\n            <Typography sx={{ mb: 2 }}>has shared a memory with you</Typography>\n            <MemoryReviewCarousel\n              memories={pendingMemories}\n              handleIndexChange={setPicIndex}\n              picIndex={picIndex}\n              handleImageLoad={picLoaded}\n            />\n            <Stack direction=\"row\" sx={{ m: 1 }}>\n              <ActionButton label=\"Accept\" color=\"primary\" handleClick={handleAccept} />\n              <ActionButton label=\"Reject\" color=\"error\" handleClick={handleReject} />\n            </Stack>\n          </Stack>\n          <SimpleSnackbar\n            snackBarOpen={snack}\n            message={snackMessage}\n            onClose={handleSnackBarClose}\n            error={snackError}\n          />\n        </Box>\n      );\n      setGrid(rc);\n    } else {\n      setGrid(<NoMemories message=\"Nothing to review right now.\" />);\n    }\n  }\n\n  useEffect(() => ReviewCarousel(), [pendingMemories, memoryIDs, nextToken, picIndex]);\n\n  console.log(\n    pendingMemories,\n    memoryIDs,\n    count,\n    (pendingMemories.length === memoryIDs.length) && (count >= memoryIDs.length),\n  );\n  return (pendingMemories.length === memoryIDs.length) && (count >= memoryIDs.length) ? (\n    grid\n  ) : (\n    <>\n      <Box\n        sx={{\n          display: 'flex',\n          width: '100%',\n          backgroundColor: 'transparent',\n          backgroundSize: 'cover',\n          backgroundImage: 'linear-gradient(white, #0e516a)',\n          justifyContent: 'center',\n        }}\n      >\n        <Stack\n          direction=\"column\"\n          alignItems=\"center\"\n          sx={{ width: '100%', my: 3 }}\n        >\n          <OwnerInfo\n            name={<Skeleton type=\"rectangular\" sx={{ width: '15%' }} />}\n            email=\"P\"\n            picture=\"\"\n          />\n          <Typography sx={{ mb: 2 }}>has shared a memory with you</Typography>\n          <MemoryReviewCarousel\n            memories={[{\n              thumbnail: {\n                memory_id: 2430549012,\n                title: 'default',\n                date: 'default',\n                photo: {\n                  key: 'key', src: imageLoading, width: 667, height: 500, alt: 'alt', title: 'Title', images: [],\n                },\n                shared: 'Shared',\n              },\n              owner_details: {},\n            }]}\n            handleIndexChange={() => {}}\n            picIndex={picIndex}\n            handleImageLoad={() => {}}\n          />\n          <Stack direction=\"row\" sx={{ m: 1 }}>\n            <ActionButton label=\"Accept\" color=\"primary\" handleClick={handleAccept} />\n            <ActionButton label=\"Reject\" color=\"error\" handleClick={handleReject} />\n          </Stack>\n        </Stack>\n      </Box>\n      <Box component=\"div\" sx={{ display: 'none' }}>\n        {grid}\n      </Box>\n    </>\n  );\n}\n\nReviewMemories.defaultProps = {\n  memoryID: '',\n};\n\nReviewMemories.propTypes = {\n  memoryID: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport Stack from '@mui/material/Stack';\n\nimport BasePage from '../base_page';\nimport OwnMemories from './Own';\nimport SharedMemories from './Shared';\nimport ReviewMemories from './Review';\n\nfunction MemoryModes({ mode, handleChange }) {\n  console.log('I am in memory modes');\n  return (\n    <Stack direction=\"row\" justifyContent=\"center\" sx={{ py: 1, backgroundColor: 'button.main' }}>\n      <ToggleButtonGroup\n        color=\"primary\"\n        value={mode}\n        exclusive\n        aria-label=\"Memory Modes\"\n      >\n        <ToggleButton value=\"own\" sx={{ borderRadius: '30px' }} onClick={handleChange}>\n          My Memories\n        </ToggleButton>\n        <ToggleButton value=\"shared\" onClick={handleChange}>\n          Shared With Me\n        </ToggleButton>\n        <ToggleButton value=\"review\" sx={{ borderRadius: '30px' }} onClick={handleChange}>\n          Review\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </Stack>\n  );\n}\n\nfunction MemoryModeContent({ mode, memoryID }) {\n  if (mode === 'own') {\n    return <OwnMemories />;\n  }\n\n  if (mode === 'shared') {\n    return <SharedMemories />;\n  }\n\n  if (mode === 'review') {\n    return <ReviewMemories memoryID={memoryID} />;\n  }\n}\n\nexport default function Memories({ initMode }) {\n  const params = useParams();\n  const { memoryMode } = params;\n  const [searchParams] = useSearchParams();\n  const [mode, setMode] = useState(initMode);\n\n  useEffect(() => {\n    if (memoryMode) {\n      setMode(memoryMode);\n    } else {\n      setMode(initMode);\n    }\n  }, [memoryMode, initMode]);\n\n  console.log(initMode, memoryMode, params, searchParams);\n\n  const handleChange = (event, newMode) => {\n    setMode(newMode);\n  };\n\n  return (\n    <BasePage create>\n      <Stack direction=\"column\">\n        <MemoryModes mode={mode} handleChange={handleChange} />\n        <MemoryModeContent mode={mode} memoryID={searchParams.get('memoryID')} />\n      </Stack>\n    </BasePage>\n  );\n}\n\nMemories.propTypes = {\n  initMode: PropTypes.string.isRequired,\n};\n\nMemoryModes.propTypes = {\n  mode: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n\nMemoryModeContent.defaultProps = {\n  memoryID: '',\n};\n\nMemoryModeContent.propTypes = {\n  mode: PropTypes.string.isRequired,\n  memoryID: PropTypes.string,\n};\n"],"names":["ThumbnailImage","imageSrc","imageSrcSet","title","handleImageLoad","component","src","srcSet","alt","sx","textAlign","objectFit","height","lg","md","xs","onLoad","ThumbnailDetails","date","avatar","shared","disableTypography","noWrap","overflow","textOverflow","width","sm","fontWeight","label","size","variant","color","subheader","padding","MemoryThumbnail","thumbnailImage","thumbnailImageSrcSet","handleClick","defaultProps","MemoryThumbnailCard","children","onClick","elevation","bgcolor","borderRadius","position","border","borderColor","MemoryItemLoading","memory","Grid","item","p","Skeleton","type","imageLoading","MemoryGrid","container","py","justifyContent","alignItems","CreateMemoryItem","navigate","useNavigate","belowmd","useMediaQuery","theme","breakpoints","down","Typography","bottom","left","AddOutlined","fontSize","top","transform","LoadMore","handleMoreClick","GridView","memories","nextToken","create","sortedMemories","sort","a","b","memory_id","length","map","owner","name","picture","email","photo","images","join","getMemories","handleMemoryCallback","handleTokenCallback","handleThumbnailCallback","api","resp","Promise","all","thumbnails","next_continuation_token","console","log","OwnMemories","useState","setNextToken","memoryIDs","setMemoryIDs","setMemories","count","setCount","grid","setGrid","aboveSM","up","memDetails","state","picLoaded","cnt","handleTokenChange","newToken","addMemories","details","arr","concat","addMemoryIDs","ids","useEffect","Box","display","NoMemories","message","Stack","direction","maxWidth","right","fill","pb","Button","getAcceptedMemories","SharedMemories","detail","thumbnail","owner_details","ActionButton","m","ReviewCard","CardActionArea","Card","ReviewImage","CardMedia","ReviewDetails","CardContent","CardHeader","ReviewItem","MemoryReviewCarousel","handleIndexChange","picIndex","carouselItems","setCarouselItems","indicators","index","onChange","ind","navButtonsAlwaysVisible","autoPlay","mem","spacing","OwnerInfo","px","memoryID","handleAcceptCallback","userInfo","commonUtils","handleRejectCallback","ReviewMemories","setPicIndex","pendingMemories","setPendingMemories","snack","setSnack","snackMessage","setSnackMessage","snackError","setSnackError","findIndex","elem","toString","handleSnackMessage","msg","error","handleSnackBarClose","addPendingMemories","handleMemoryRemove","pmCount","currentIndex","memID","cleanedMemIds","filter","e","slice","getReviewMemories","handleAcceptActionResults","ok","handleRejectActionResults","handleAccept","acceptMemory","handleReject","rejectMemory","rc","backgroundColor","backgroundSize","backgroundImage","my","mb","snackBarOpen","onClose","ReviewCarousel","key","MemoryModes","mode","handleChange","ToggleButtonGroup","value","exclusive","ToggleButton","MemoryModeContent","Memories","initMode","params","useParams","memoryMode","useSearchParams","searchParams","setMode","event","newMode","get"],"sourceRoot":""}