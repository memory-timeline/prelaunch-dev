{"version":3,"file":"static/js/148.d493cc64.chunk.js","mappings":"oPAG6C,SAE9BA,EAAoB,EAAD,qDAwCjC,OAxCiC,0BAAlC,WACEC,EACAC,EACAC,EACAC,EACAC,GAAkB,4EAGmB,OADrCF,EAAiBF,EAASK,QAC1BF,EAAoBH,EAASK,QAAQ,SAClBC,QAAQC,WACzBP,EAASQ,IAAG,yCAAC,WAAOC,GAAS,4EAyBxB,OAxBGC,EAAS,IAAIJ,SAAQ,SAACK,GAC1B,IAAMC,EAAQ,IAAIC,MAClBD,EAAME,OAAS,SAACC,GACd,MAAwCA,EAAEC,OACpCC,EADc,EAAZC,aAA2B,EAAbC,cAEdC,EAAgBX,EAAhBW,MAAOC,EAASZ,EAATY,KAOTC,EAAkB,CACtBF,MAAAA,EACAG,IARcC,EAAAA,EAAAA,eACdZ,EACAX,EACAA,EAAcgB,EACdI,GAKAF,cAAelB,EAAcgB,EAC7BC,aAAcjB,EACdgB,YAAAA,EACAI,KAAAA,GAEFV,EAAQW,GACRlB,EAAmBkB,EAAiBb,EACtC,EACAG,EAAMW,IAAMd,EAAUc,GACxB,IAAE,kBACKb,GAAM,2CACd,mDA3BW,KA4BZ,KAAD,EA7BS,OAAJe,EAAI,yBA8BHA,EAAKjB,KAAI,SAACkB,GAAI,OAAKA,EAAKC,KAAK,KAAC,2CACtC,wBAEc,SAASC,IACtB,IACQC,GADOC,EAAAA,EAAAA,MACPD,UAEFE,EAAU,yCAAG,WACjBC,EACA9B,EACAC,EACAC,GAAkB,oFAEmC,OAArD6B,QAAQC,IAAI,yCAAyC,SAC/BC,EAAAA,EAAAA,WAAsBN,GAAW,KAAD,EACtB,OAD1BO,EAAO,OACPC,EAAWD,EAAQA,QAAQ,EAAD,OACP9B,QAAQC,WAC/B8B,EAASC,OAAO9B,IAAG,yCAAC,WAAO+B,GAAG,8EACO,OAA7BhB,EAAMa,EAAQI,KAAKD,EAAInB,OAAO,EAAD,OACZqB,MAAMlB,GAAKmB,MAAK,SAACC,GAAI,OAAKA,EAAKC,MAAM,IAAE,KAAD,EAC1B,OAD7BC,EAAQ,OACdZ,QAAQC,IAAI,YAAaW,GAAU,qCACvBN,GAAG,IAAEhB,IAAKsB,KAAQ,2CAC/B,mDALkB,KAMnB,KAAD,EAC0D,OARrDC,EAAU,OAQVC,EAAiBD,EAAWtC,KAAI,SAACkB,GAAI,OAAKA,EAAKC,KAAK,IAAE,EAAD,QACtC5B,EACnBgD,EACAf,EACA9B,EACAC,EACAC,GACA,KAAD,GANW,OAANkC,EAAM,yBAOL,CAAEF,QAASC,EAAUC,OAAAA,EAAQS,eAAAA,IAAgB,4CACrD,gBA1Be,4CA4BhB,OACE,SAAC,UAAW,CACVhB,WAAYA,EACZiB,aAAc,kBAAMb,EAAAA,EAAAA,cAAyBN,EAAU,EACvDoB,SAAS,YAGf,C","sources":["pages/collage/View.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport collageapi from 'api/collage';\nimport helpers from 'components/collage/helpers';\nimport BaseCollage from 'pages/collage/Base';\n\nasync function resizeCollageImages(\n  imageArr,\n  resizeWidth,\n  handleImageCount,\n  handleNewImageCount,\n  handleImageDetails\n) {\n  handleImageCount(imageArr.length);\n  handleNewImageCount(imageArr.length);\n  const imgs = await Promise.allSettled(\n    imageArr.map(async (imageElem) => {\n      const result = new Promise((resolve) => {\n        const image = new Image();\n        image.onload = (e) => {\n          const { naturalWidth, naturalHeight } = e.target;\n          const aspectRatio = naturalWidth / naturalHeight;\n          const { title, type } = imageElem;\n          const dataurl = helpers.downscaleImage(\n            image,\n            resizeWidth,\n            resizeWidth / aspectRatio,\n            type\n          );\n          const resizedImageDet = {\n            title,\n            src: dataurl,\n            naturalHeight: resizeWidth / aspectRatio,\n            naturalWidth: resizeWidth,\n            aspectRatio,\n            type,\n          };\n          resolve(resizedImageDet);\n          handleImageDetails(resizedImageDet, imageElem);\n        };\n        image.src = imageElem.src;\n      });\n      return result;\n    })\n  );\n  return imgs.map((elem) => elem.value);\n}\n\nexport default function CollageView() {\n  const params = useParams();\n  const { collageID } = params;\n\n  const getCollage = async (\n    resizeImageWidth,\n    handleImageCount,\n    handleNewImageCount,\n    handleImageDetails\n  ) => {\n    console.log('use effect making call to get collage');\n    const details = await collageapi.getCollage(collageID);\n    const collDets = details.details;\n    const tempImages = await Promise.allSettled(\n      collDets.images.map(async (img) => {\n        const src = details.urls[img.title];\n        const imageSRC = await fetch(src).then((resp) => resp.text());\n        console.log('image SRC', imageSRC);\n        return { ...img, src: imageSRC };\n      })\n    );\n    const originalImages = tempImages.map((elem) => elem.value);\n    const images = await resizeCollageImages(\n      originalImages,\n      resizeImageWidth,\n      handleImageCount,\n      handleNewImageCount,\n      handleImageDetails\n    );\n    return { details: collDets, images, originalImages };\n  };\n\n  return (\n    <BaseCollage\n      getCollage={getCollage}\n      clearCollage={() => collageapi.deleteCollage(collageID)}\n      saveType=\"existing\"\n    />\n  );\n}\n"],"names":["resizeCollageImages","imageArr","resizeWidth","handleImageCount","handleNewImageCount","handleImageDetails","length","Promise","allSettled","map","imageElem","result","resolve","image","Image","onload","e","target","aspectRatio","naturalWidth","naturalHeight","title","type","resizedImageDet","src","helpers","imgs","elem","value","CollageView","collageID","useParams","getCollage","resizeImageWidth","console","log","collageapi","details","collDets","images","img","urls","fetch","then","resp","text","imageSRC","tempImages","originalImages","clearCollage","saveType"],"sourceRoot":""}