{"version":3,"file":"static/js/148.0c0084b2.chunk.js","mappings":"yOA6CA,SAEeA,EAAU,EAAD,+CASvB,OATuB,0BAAxB,WAAyBC,EAASC,GAAI,4FACXC,QAAQC,WAC/BH,EAAQI,IAAG,yCAAC,WAAOC,GAAG,4FACGC,MAAML,EAAKI,EAAIE,QAAQC,MAAK,SAACC,GAAI,OAAKA,EAAKC,MAAM,IAAE,KAAD,EACtC,OAD7BC,EAAQ,OACdC,QAAQC,IAAI,YAAaF,GAAU,qCACvBN,GAAG,IAAES,IAAKH,KAAQ,2CAC/B,mDAJU,KAKX,KAAD,EANe,OAAVI,EAAU,yBAOTA,EAAWX,KAAI,SAACY,GAAI,OAAKA,EAAKC,KAAK,KAAC,2CAC5C,wBAEc,SAASC,IACtB,IACQC,GADOC,EAAAA,EAAAA,MACPD,UAEFE,EAAU,yCAAG,WACjBC,EACAC,EACAC,GAAkB,8EAEmC,OAArDZ,QAAQC,IAAI,yCAAyC,SAC/BY,EAAAA,EAAAA,WAAsBN,GAAW,KAAD,EAAzC,OAAPO,EAAO,gBACQ3B,EAAU2B,EAAQA,QAAQC,OAAQD,EAAQzB,MAAM,KAAD,EAGvB,OAHvC0B,EAAM,OACZL,EAAiBK,EAAOC,QACxBL,EAAoBI,EAAOC,QAC3BD,EAAOvB,KAAI,SAACC,GAAG,OAAKmB,EAAmBnB,EAAI,IAAE,kBACtC,CAAEqB,QAASA,EAAQA,QAASC,OAAAA,IAAQ,4CAC5C,gBAZe,0CAchB,OACE,SAAC,UAAW,CACVN,WAAYA,EACZQ,aAAc,kBAAMJ,EAAAA,EAAAA,cAAyBN,EAAU,EACvDW,SAAS,YAGf,C","sources":["pages/collage/View.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport collageapi from 'api/collage';\n// import helpers from 'components/collage/helpers';\nimport BaseCollage from 'pages/collage/Base';\n\n// async function resizeCollageImages(\n//   imageArr,\n//   resizeWidth,\n//   handleImageCount,\n//   handleNewImageCount,\n//   handleImageDetails\n// ) {\n//   handleImageCount(imageArr.length);\n//   handleNewImageCount(imageArr.length);\n//   const imgs = await Promise.allSettled(\n//     imageArr.map(async (imageElem) => {\n//       const result = new Promise((resolve) => {\n//         const image = new Image();\n//         image.onload = (e) => {\n//           const { naturalWidth, naturalHeight } = e.target;\n//           const aspectRatio = naturalWidth / naturalHeight;\n//           const { title, type } = imageElem;\n//           const dataurl = helpers.downscaleImage(\n//             image,\n//             resizeWidth,\n//             resizeWidth / aspectRatio,\n//             type\n//           );\n//           const resizedImageDet = {\n//             title,\n//             src: dataurl,\n//             naturalHeight: resizeWidth / aspectRatio,\n//             naturalWidth: resizeWidth,\n//             aspectRatio,\n//             type,\n//           };\n//           resolve(resizedImageDet);\n//           handleImageDetails(resizedImageDet, imageElem);\n//         };\n//         image.src = imageElem.src;\n//       });\n//       return result;\n//     })\n//   );\n//   return imgs.map((elem) => elem.value);\n// }\n\nasync function getImages(imgDets, urls) {\n  const tempImages = await Promise.allSettled(\n    imgDets.map(async (img) => {\n      const imageSRC = await fetch(urls[img.title]).then((resp) => resp.text());\n      console.log('image SRC', imageSRC);\n      return { ...img, src: imageSRC };\n    })\n  );\n  return tempImages.map((elem) => elem.value);\n}\n\nexport default function CollageView() {\n  const params = useParams();\n  const { collageID } = params;\n\n  const getCollage = async (\n    handleImageCount,\n    handleNewImageCount,\n    handleImageDetails\n  ) => {\n    console.log('use effect making call to get collage');\n    const details = await collageapi.getCollage(collageID);\n    const images = await getImages(details.details.images, details.urls);\n    handleImageCount(images.length);\n    handleNewImageCount(images.length);\n    images.map((img) => handleImageDetails(img));\n    return { details: details.details, images };\n  };\n\n  return (\n    <BaseCollage\n      getCollage={getCollage}\n      clearCollage={() => collageapi.deleteCollage(collageID)}\n      saveType=\"existing\"\n    />\n  );\n}\n"],"names":["getImages","imgDets","urls","Promise","allSettled","map","img","fetch","title","then","resp","text","imageSRC","console","log","src","tempImages","elem","value","CollageView","collageID","useParams","getCollage","handleImageCount","handleNewImageCount","handleImageDetails","collageapi","details","images","length","clearCollage","saveType"],"sourceRoot":""}