{"version":3,"file":"static/js/148.d7cc22a7.chunk.js","mappings":"iJAeqB,aAUpB,OAVoB,0BAArB,WAAsBA,EAAKC,GAAI,8EAEW,OAFX,SAErBC,EAAS,CAAED,KAAAA,EAAME,OAAQ,OAAQ,EAAD,OACnBC,MAAMJ,EAAKE,GAAQG,MAAK,SAACC,GAAQ,OAAKA,CAAQ,IAAE,KAAD,EAAxD,OAAJC,EAAI,yBACHA,GAAI,OAGQ,OAHR,yBAGXC,QAAQC,IAAI,EAAD,IAAQ,kFAGtB,sBAyCD,KAAiBC,WAhEjB,SAAoBC,EAAWC,GAC7B,IACE,IACMV,EAAS,CAAEW,WAAYF,GAE7B,OAAOG,EAAAA,EAAAA,KADSC,oCAFH,mBAGsBb,EAAQc,KAAKC,UAAUL,GAK5D,CAJE,MAAOM,GAGP,OADAV,QAAQC,IAAIS,GACLA,CACT,CACF,EAqD6BC,OArD5B,SAEqB,EAAD,mCAmDgBC,aAvCrC,SAAsBC,GACpB,IACE,IACMnB,EAAS,CAAEoB,WAAYD,GAE7B,OAAOP,EAAAA,EAAAA,IADSC,oCAFH,oBAGqBb,EAKpC,CAJE,MAAOgB,GAGP,OADAV,QAAQC,IAAIS,GACLA,CACT,CACF,EA4BmDK,aA1BnD,SAAsBC,GACpB,IACE,IACMtB,EAAS,CAAEW,WAAYW,GAE7B,OAAOV,EAAAA,EAAAA,IADSC,oCAFH,yBAGqBb,EAKpC,CAJE,MAAOgB,GAGP,OADAV,QAAQC,IAAIS,GACLA,CACT,CACF,EAeiEO,WAbjE,SAAoBD,GAClB,IACE,IACMtB,EAAS,CAAEW,WAAYW,GAE7B,OAAOV,EAAAA,EAAAA,IADSC,oCAFH,mBAGqBb,EAKpC,CAJE,MAAOgB,GAGP,OADAV,QAAQC,IAAIS,GACLA,CACT,CACF,E,kDChEMQ,EAAG,yCAAG,WAAO1B,EAAK2B,GAAI,8FAO6B,OAP3BzB,EAAM,+BAAG,CAAC,EAClC0B,EAAM,kBAAc5B,GAAG,OAAG2B,GACxBE,EAAU,CACd1B,OAAQ,MACR2B,YAAa,UACbC,QAAS,IAAIC,QAAQ,CAAE,eAAgB,sBAEzCJ,GAAM,WAAQ,IAAIK,gBAAgB/B,GAAQgC,YAAa,SACpC9B,MAAMwB,EAAQC,GAAS,KAAD,EAA/B,IAAJtB,EAAI,QACA4B,GAAG,CAAD,mBACU,MAAhB5B,EAAK6B,OAAc,iBAEyC,OAD9DC,SAASC,OACP,4DAA4D,kBACvD,CAAEF,OAAQ,oBAAmB,WAElB,MAAhB7B,EAAK6B,OAAc,0CACd,CAAEA,OAAQ,cAAa,iCAI3B7B,EAAKgC,QAAM,4CACnB,gBArBQ,wCAuBHC,EAAI,yCAAG,WAAOxC,EAAK2B,EAAMzB,EAAQD,GAAI,8EAQvC,OAPEwC,EAAM,kBAAczC,GAAG,OAAG2B,GAC9Bc,GAAM,WAAQ,IAAIR,gBAAgB/B,GAAQgC,YACpCL,EAAU,CACd1B,OAAQ,OACR2B,YAAa,UACbC,QAAS,IAAIC,QAAQ,CAAE,eAAgB,qBACvC/B,KAAAA,GACD,kBACMG,MAAMqC,EAAQZ,GAASxB,MAAK,SAACC,GAClC,OAAKA,EAAS6B,GAGP7B,EAASiC,OAFP,CAAEH,OAAQ,QAGrB,KAAE,2CACH,gBAfS,4CAiBV,KAAiBV,IAAAA,EAAKc,KAAAA,E,2ICpCP,SAASE,IACtB,IACQ/B,GADOgC,EAAAA,EAAAA,MACPhC,UAOR,OALAiC,EAAAA,EAAAA,YAAS,uBAAC,yGACcC,EAAAA,EAAAA,WAAsBlC,GAAW,KAAD,EAAhDmC,EAAO,OACbtC,QAAQC,IAAIE,EAAWmC,GAAS,2CAC/B,KAEI,2BAAK,oCAAkCnC,IAChD,C","sources":["api/collage.jsx","api/helpers.js","pages/collage/View.jsx"],"sourcesContent":["import helpers from 'api/helpers';\n\nfunction newCollage(collageID, collageDetails) {\n  try {\n    const path = '/api/collage/new';\n    const params = { collage_id: collageID };\n    const authURL = process.env.REACT_APP_AUTH_URL;\n    return helpers.post(authURL, path, params, JSON.stringify(collageDetails));\n  } catch (error) {\n    /* eslint-disable no-console */\n    console.log(error);\n    return error;\n  }\n}\n\nasync function upload(url, body) {\n  try {\n    const params = { body, method: 'PUT' };\n    const resp = await fetch(url, params).then((response) => response);\n    return resp;\n  } catch (error) {\n    /* eslint-disable no-console */\n    console.log(error);\n    return error;\n  }\n}\n\nfunction listCollages(nextToken) {\n  try {\n    const path = '/api/collage/list';\n    const params = { next_token: nextToken };\n    const authURL = process.env.REACT_APP_AUTH_URL;\n    return helpers.get(authURL, path, params);\n  } catch (error) {\n    /* eslint-disable no-console */\n    console.log(error);\n    return error;\n  }\n}\n\nfunction getThumbnail(collageId) {\n  try {\n    const path = '/api/collage/thumbnail';\n    const params = { collage_id: collageId };\n    const authURL = process.env.REACT_APP_AUTH_URL;\n    return helpers.get(authURL, path, params);\n  } catch (error) {\n    /* eslint-disable no-console */\n    console.log(error);\n    return error;\n  }\n}\n\nfunction getCollage(collageId) {\n  try {\n    const path = '/api/collage/get';\n    const params = { collage_id: collageId };\n    const authURL = process.env.REACT_APP_AUTH_URL;\n    return helpers.get(authURL, path, params);\n  } catch (error) {\n    /* eslint-disable no-console */\n    console.log(error);\n    return error;\n  }\n}\n\nexport default { newCollage, upload, listCollages, getThumbnail, getCollage };\n","const get = async (url, path, params = {}) => {\n  let newUrl = `https://${url}${path}`;\n  const options = {\n    method: 'GET',\n    credentials: 'include',\n    headers: new Headers({ 'content-type': 'application/json' }),\n  };\n  newUrl += `?${new URLSearchParams(params).toString()}`;\n  const resp = await fetch(newUrl, options);\n  if (!resp.ok) {\n    if (resp.status === 401) {\n      document.cookie =\n        'userInfo=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n      return { status: 'unauthenticated' };\n    }\n    if (resp.status === 403) {\n      return { status: 'forbidden' };\n    }\n  }\n\n  return resp.json();\n};\n\nconst post = async (url, path, params, body) => {\n  let apiUrl = `https://${url}${path}`;\n  apiUrl += `?${new URLSearchParams(params).toString()}`;\n  const options = {\n    method: 'POST',\n    credentials: 'include',\n    headers: new Headers({ 'content-type': 'application/json' }),\n    body,\n  };\n  return fetch(apiUrl, options).then((response) => {\n    if (!response.ok) {\n      return { status: 'error' };\n    }\n    return response.json();\n  });\n};\n\nexport default { get, post };\n","import { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport collageapi from 'api/collage';\n\nexport default function CollageView() {\n  const params = useParams();\n  const { collageID } = params;\n\n  useEffect(async () => {\n    const details = await collageapi.getCollage(collageID);\n    console.log(collageID, details);\n  }, []);\n\n  return <div>Showing details for collage id : {collageID}</div>;\n}\n"],"names":["url","body","params","method","fetch","then","response","resp","console","log","newCollage","collageID","collageDetails","collage_id","helpers","process","JSON","stringify","error","upload","listCollages","nextToken","next_token","getThumbnail","collageId","getCollage","get","path","newUrl","options","credentials","headers","Headers","URLSearchParams","toString","ok","status","document","cookie","json","post","apiUrl","CollageView","useParams","useEffect","collageapi","details"],"sourceRoot":""}