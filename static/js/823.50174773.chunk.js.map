{"version":3,"file":"static/js/823.50174773.chunk.js","mappings":"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","sources":["pages/MemoryThumbnail.jsx","pages/MemoryThumbnailCard.jsx","pages/memories/CreateMemoryItem.jsx","pages/memories/LoadMore.jsx","pages/memories/GridView.jsx","pages/memories/Own.jsx","pages/memories/Shared.jsx","components/ReviewCard.jsx","components/ReviewItem.jsx","pages/memories/Review.jsx","pages/memories/Memories.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport CardMedia from '@mui/material/CardMedia';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport Typography from '@mui/material/Typography';\nimport MemoryThumbnailCard from './MemoryThumbnailCard';\n\nfunction ThumbnailImage({\n  imageSrc, imageSrcSet, title, handleImageLoad,\n}) {\n  return (\n    <CardMedia\n      component=\"img\"\n      src={imageSrc}\n      srcSet={imageSrcSet}\n      alt={title}\n      sx={{\n        borderColor: 'muted.main',\n        borderRadius: 4,\n        textAlign: 'center',\n        objectFit: 'cover',\n        height: {\n          lg: 270,\n          sm: 220,\n          xs: 170,\n        },\n      }}\n      onLoad={handleImageLoad}\n    />\n  );\n}\n\nfunction ThumbnailDetails({ title, date }) {\n  return (\n    <CardContent>\n      <CardHeader\n        disableTypography\n        title={(\n          <Typography\n            noWrap\n            sx={{\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              width: { xs: 'calc(75%)', sm: 'calc(100%)' },\n              fontWeight: 600,\n            }}\n          >\n            {title}\n          </Typography>\n        )}\n        subheader={<Typography sx={{ color: 'muted.main' }}>{date}</Typography>}\n        sx={{\n          padding: 0,\n          color: 'faded.black',\n        }}\n      />\n    </CardContent>\n  );\n}\n\nexport default function MemoryThumbnail({\n  title,\n  date,\n  thumbnailImage,\n  thumbnailImageSrcSet,\n  handleClick,\n  handleImageLoad,\n}) {\n  return (\n    <MemoryThumbnailCard handleClick={handleClick}>\n      <ThumbnailImage\n        imageSrc={thumbnailImage}\n        imageSrcSet={thumbnailImageSrcSet}\n        title={title}\n        handleImageLoad={handleImageLoad}\n      />\n      <ThumbnailDetails title={title} date={date} />\n    </MemoryThumbnailCard>\n  );\n}\n\nThumbnailDetails.defaultProps = {\n  title: 'Memory Thumbnail Image',\n  date: 'Memory Date',\n};\n\nThumbnailDetails.propTypes = {\n  title: PropTypes.string,\n  date: PropTypes.string,\n};\n\nThumbnailImage.defaultProps = {\n  title: 'Memory Thumbnail Image',\n  imageSrc: '',\n  imageSrcSet: '',\n  handleImageLoad: () => {},\n};\n\nThumbnailImage.propTypes = {\n  title: PropTypes.string,\n  imageSrc: PropTypes.string,\n  imageSrcSet: PropTypes.string,\n  handleImageLoad: PropTypes.func,\n};\n\nMemoryThumbnail.defaultProps = {\n  thumbnailImageSrcSet: '',\n  handleImageLoad: () => {},\n};\n\nMemoryThumbnail.propTypes = {\n  title: PropTypes.oneOfType([PropTypes.element, PropTypes.string]).isRequired,\n  date: PropTypes.oneOfType([PropTypes.element, PropTypes.string]).isRequired,\n  thumbnailImage: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  thumbnailImageSrcSet: PropTypes.string,\n  handleImageLoad: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport Card from '@mui/material/Card';\nimport CardActionArea from '@mui/material/CardActionArea';\n//  import { useTheme, alpha } from '@mui/material/styles';\n\nexport default function MemoryThumbnailCard({ handleClick, children }) {\n  //  const theme = useTheme();\n\n  return (\n    <CardActionArea onClick={handleClick}>\n      <Card\n        elevation={0}\n        sx={{\n          bgcolor: '#fff',\n          borderRadius: 5,\n          border: '2px solid gray',\n          color: 'black',\n          position: 'relative',\n          height: {\n            lg: 350,\n            sm: 300,\n            xs: 250,\n          },\n          '&:hover': {\n            border: 3,\n            borderColor: 'secondary.main',\n            elevation: 0,\n          },\n        }}\n      >\n        {children}\n      </Card>\n    </CardActionArea>\n  );\n}\n\nMemoryThumbnailCard.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import { useNavigate } from 'react-router-dom';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport AddOutlinedIcon from '@mui/icons-material/AddOutlined';\n\nimport MemoryThumbnailCard from '../MemoryThumbnailCard';\n\nexport default function CreateMemoryItem() {\n  const navigate = useNavigate();\n  const belowmd = useMediaQuery((theme) => theme.breakpoints.down('md'));\n\n  const handleClick = () => {\n    navigate('/memory/create');\n  };\n\n  return (\n    <Grid\n      item\n      key=\"creatememory\"\n      lg={3}\n      md={4}\n      xs={6}\n      sx={{ p: 1 }}\n    >\n      <MemoryThumbnailCard handleClick={handleClick}>\n        <Typography\n          variant={belowmd ? 'body1' : 'h5'}\n          color=\"button.main\"\n          sx={{\n            p: 1,\n            color: 'secondary.main',\n            bgcolor: 'primary.main',\n            borderRadius: '0px 10px 10px 0px',\n            borderColor: 'secondary.main',\n            position: 'absolute',\n            bottom: 15,\n            left: 0,\n          }}\n        >\n          Create a memory\n        </Typography>\n        <AddOutlinedIcon\n          sx={{\n            position: 'absolute',\n            border: 3,\n            borderRadius: '50%',\n            fontSize: '7.5rem',\n            left: '50%',\n            top: '50%',\n            transform: 'translate(-50%, -50%)',\n            color: 'muted.main',\n          }}\n        />\n      </MemoryThumbnailCard>\n    </Grid>\n  );\n}\n","import PropTypes from 'prop-types';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\n\nimport MemoryThumbnailCard from '../MemoryThumbnailCard';\n\nexport default function LoadMore({ handleMoreClick }) {\n  return (\n    <Grid\n      item\n      key=\"creatememory\"\n      lg={3}\n      md={4}\n      xs={6}\n      sx={{ p: 1 }}\n    >\n      <MemoryThumbnailCard handleClick={handleMoreClick}>\n        <Typography\n          variant=\"h5\"\n          sx={{\n            p: 2,\n            color: 'secondary.main',\n            bgcolor: 'primary.main',\n            borderRadius: { md: 10, xs: '50%' },\n            borderColor: 'secondary.main',\n            position: 'absolute',\n            bottom: '50%',\n            left: '50%',\n            transform: 'translate(-50%, +50%)',\n            textAlign: 'center',\n          }}\n        >\n          Load More\n        </Typography>\n      </MemoryThumbnailCard>\n    </Grid>\n  );\n}\n\nLoadMore.propTypes = {\n  handleMoreClick: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useNavigate } from 'react-router-dom';\nimport Grid from '@mui/material/Grid';\nimport MemoryThumbnail from '../MemoryThumbnail';\n\nimport CreateMemoryItem from './CreateMemoryItem';\nimport LoadMore from './LoadMore';\n\nexport default function GridView({\n  memories, handleMoreClick, nextToken, handleImageLoad,\n}) {\n  const navigate = useNavigate();\n  const sortedMemories = memories.sort((a, b) => (a.memory_id > b.memory_id ? 1 : -1));\n\n  const handleClick = (memDetails) => {\n    navigate(`/memory/${memDetails.memory_id}`, { state: memDetails });\n  };\n\n  const getThumbnailSrcSet = (thumbnailImage) => {\n    const srcSetList = thumbnailImage.images ? thumbnailImage.images.map(({ src, width }) => `${src} ${width}w`) : [];\n    return srcSetList.join(',');\n  };\n\n  return (\n    <Grid container sx={{ bgcolor: 'button.main', py: 1 }} justifyContent=\"left\" alignItems=\"flex-start\">\n      <CreateMemoryItem />\n      {sortedMemories.map((memory) => (\n        <Grid\n          item\n          key={memory.title}\n          lg={3}\n          md={4}\n          xs={6}\n          sx={{ p: 1 }}\n        >\n          <MemoryThumbnail\n            title={memory.title}\n            date={memory.date}\n            thumbnailImage={memory.photo.src}\n            thumbnailImageSrcSet={getThumbnailSrcSet(memory.photo)}\n            handleClick={() => handleClick(memory)}\n            handleImageLoad={handleImageLoad}\n          />\n        </Grid>\n      ))}\n      { nextToken && (<LoadMore handleMoreClick={handleMoreClick} />) }\n    </Grid>\n  );\n}\n\nGridView.defaultProps = {\n  memories: [],\n};\n\nGridView.propTypes = {\n  memories: PropTypes.arrayOf(\n    PropTypes.shape({\n      memory_id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      date: PropTypes.string.isRequired,\n      photo: PropTypes.arrayOf(PropTypes.shape({\n        key: PropTypes.string,\n        src: PropTypes.string,\n        title: PropTypes.string,\n        alt: PropTypes.string,\n        width: PropTypes.number,\n        height: PropTypes.number,\n      })),\n    }),\n  ),\n  nextToken: PropTypes.string.isRequired,\n  handleMoreClick: PropTypes.func.isRequired,\n  handleImageLoad: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Skeleton from '@mui/material/Skeleton';\nimport GridView from './GridView';\nimport api from '../Api';\nimport CreateMemoryItem from './CreateMemoryItem';\nimport MemoryThumbnail from '../MemoryThumbnail';\n\nimport imageLoading from '../../static/images/image-loading.gif';\n\nasync function getMemories(\n  handleMemoryCallback,\n  handleTokenCallback,\n  handleThumbnailCallback,\n  nextToken = '',\n) {\n  try {\n    const resp = await api.getMemories(nextToken);\n    if (resp) {\n      if (resp.memories) {\n        handleThumbnailCallback(resp.memories);\n        const thumbnails = await Promise.all(\n          api.getThumbnails(resp.memories),\n        );\n        handleMemoryCallback(thumbnails);\n        handleTokenCallback(resp.next_continuation_token || '');\n      }\n    }\n  } catch (error) {\n    /* eslint-disable no-console */\n    console.log(error);\n  }\n}\n\nexport default function OwnMemories() {\n  const [nextToken, setNextToken] = useState('');\n  const [memoryIDs, setMemoryIDs] = useState([]);\n  const [memories, setMemories] = useState([]);\n  const [count, setCount] = useState(0);\n  const [grid, setGrid] = useState(null);\n\n  const picLoaded = () => {\n    setCount((cnt) => cnt + 1);\n  };\n  const handleTokenChange = (newToken) => setNextToken(newToken);\n\n  const addMemories = (details) => {\n    setMemories((arr) => arr.concat(details));\n  };\n\n  const addMemoryIDs = (ids) => {\n    setMemoryIDs((arr) => arr.concat(ids));\n  };\n\n  useEffect(() => {\n    getMemories(\n      addMemories,\n      handleTokenChange,\n      addMemoryIDs,\n      nextToken,\n    );\n  }, []);\n\n  function GetThumbnailGrid() {\n    const thumbnailGrid = (\n      <GridView\n        memories={memories}\n        nextToken={nextToken}\n        handleMoreClick={() => getMemories(\n          addMemories,\n          handleTokenChange,\n          addMemoryIDs,\n          nextToken,\n        )}\n        handleImageLoad={picLoaded}\n      />\n    );\n    setGrid(thumbnailGrid);\n  }\n\n  useEffect(() => GetThumbnailGrid(), [memories, nextToken]);\n\n  return (memories.length === memoryIDs.length) && (count >= memoryIDs.length) ? (\n    grid\n  ) : (\n    <>\n      <Grid\n        container\n        sx={{ bgcolor: 'button.main', py: 1 }}\n        justifyContent=\"left\"\n        alignItems=\"flex-start\"\n      >\n        <CreateMemoryItem />\n\n        {memoryIDs.map((memory) => (\n          <Grid item key={memory} lg={3} md={4} xs={6} sx={{ p: 1 }}>\n            <MemoryThumbnail\n              title={<Skeleton type=\"rectangular\" sx={{ width: '60%' }} />}\n              date={<Skeleton type=\"rectangular\" sx={{ width: '50%' }} />}\n              thumbnailImage={imageLoading}\n              handleClick={() => {}}\n            />\n          </Grid>\n        ))}\n      </Grid>\n\n      <Box component=\"div\" sx={{ display: 'none' }}>\n        {grid}\n      </Box>\n    </>\n  );\n}\n","import Typography from '@mui/material/Typography';\n\nexport default function SharedMemories() {\n  return <Typography>Shared Memories</Typography>;\n}\n","import PropTypes from 'prop-types';\nimport Card from '@mui/material/Card';\nimport CardActionArea from '@mui/material/CardActionArea';\n\nexport default function ReviewCard({ handleClick, children }) {\n  return (\n    <CardActionArea onClick={handleClick}>\n      <Card\n        elevation={0}\n        sx={{\n          bgcolor: '#fff',\n          borderRadius: 5,\n          position: 'relative',\n        }}\n      >\n        {children}\n      </Card>\n    </CardActionArea>\n  );\n}\n\nReviewCard.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport CardMedia from '@mui/material/CardMedia';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport Typography from '@mui/material/Typography';\nimport ReviewCard from './ReviewCard';\n\nfunction ReviewImage({\n  imageSrc, imageSrcSet, title, handleImageLoad,\n}) {\n  return (\n    <CardMedia\n      component=\"img\"\n      src={imageSrc}\n      srcSet={imageSrcSet}\n      alt={title}\n      sx={{\n        borderColor: 'muted.main',\n        borderRadius: 4,\n        textAlign: 'center',\n        objectFit: 'cover',\n        height: {\n          lg: 400,\n          sm: 350,\n          xs: 350,\n        },\n      }}\n      onLoad={handleImageLoad}\n    />\n  );\n}\n\nfunction ReviewDetails({ title, date }) {\n  return (\n    <CardContent>\n      <CardHeader\n        disableTypography\n        title={(\n          <Typography\n            noWrap\n            sx={{\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              width: { xs: 'calc(75%)', sm: 'calc(100%)' },\n              fontWeight: 600,\n            }}\n          >\n            {title}\n          </Typography>\n        )}\n        subheader={<Typography sx={{ color: 'muted.main' }}>{date}</Typography>}\n        sx={{\n          padding: 0,\n          color: 'faded.black',\n        }}\n      />\n    </CardContent>\n  );\n}\n\nexport default function ReviewItem({\n  title,\n  date,\n  thumbnailImage,\n  thumbnailImageSrcSet,\n  handleClick,\n  handleImageLoad,\n}) {\n  return (\n    <ReviewCard handleClick={handleClick}>\n      <ReviewImage\n        imageSrc={thumbnailImage}\n        imageSrcSet={thumbnailImageSrcSet}\n        title={title}\n        handleImageLoad={handleImageLoad}\n      />\n      <ReviewDetails title={title} date={date} />\n    </ReviewCard>\n  );\n}\n\nReviewDetails.defaultProps = {\n  title: 'Review Image',\n  date: 'Memory Date',\n};\n\nReviewDetails.propTypes = {\n  title: PropTypes.string,\n  date: PropTypes.string,\n};\n\nReviewImage.defaultProps = {\n  title: 'Review Image',\n  imageSrc: '',\n  imageSrcSet: '',\n  handleImageLoad: () => {},\n};\n\nReviewImage.propTypes = {\n  title: PropTypes.string,\n  imageSrc: PropTypes.string,\n  imageSrcSet: PropTypes.string,\n  handleImageLoad: PropTypes.func,\n};\n\nReviewItem.defaultProps = {\n  thumbnailImageSrcSet: '',\n  handleImageLoad: () => {},\n};\n\nReviewItem.propTypes = {\n  title: PropTypes.oneOfType([PropTypes.element, PropTypes.string]).isRequired,\n  date: PropTypes.oneOfType([PropTypes.element, PropTypes.string]).isRequired,\n  thumbnailImage: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  thumbnailImageSrcSet: PropTypes.string,\n  handleImageLoad: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport Carousel from 'react-material-ui-carousel';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport ProfileAvatar from 'components/profile';\n\nimport ReviewItem from 'components/ReviewItem';\nimport api from 'pages/Api';\n\nasync function getReviewMemories(\n  handleMemoryCallback,\n  handleTokenCallback,\n  //  handleThumbnailCallback,\n  nextToken = '',\n) {\n  try {\n    const resp = await api.getPendingMemories(nextToken);\n    if (resp) {\n      if (resp.memories) {\n        /* eslint-disable no-console */\n        console.log('review memories', resp);\n        //  handleThumbnailCallback(resp.memories);\n        const thumbnails = await Promise.all(\n          api.getPendingThumbnails(resp.memories),\n        );\n        handleMemoryCallback(thumbnails);\n        handleTokenCallback(resp.next_continuation_token || '');\n      }\n    }\n  } catch (error) {\n    /* eslint-disable no-console */\n    console.log(error);\n  }\n}\n\nexport default function ReviewMemories({ memoryID }) {\n  const [picIndex, setPicIndex] = useState(0);\n  const [nextToken, setNextToken] = useState('');\n  const [pendingMemories, setPendingMemories] = useState([]);\n  console.log(memoryID);\n\n  const handleTokenChange = (newToken) => setNextToken(newToken);\n\n  const addPendingMemories = (details) => {\n    setPendingMemories((arr) => arr.concat(details));\n  };\n\n  useEffect(() => {\n    getReviewMemories(\n      addPendingMemories,\n      handleTokenChange,\n      nextToken,\n    );\n  }, []);\n\n  /* eslint-disable no-console */\n  console.log('pending memories', pendingMemories);\n  return (pendingMemories.length > 0) ? (\n    <Box\n      sx={{\n        display: 'flex',\n        width: '100%',\n        backgroundColor: 'transparent',\n        backgroundSize: 'cover',\n        backgroundImage: 'linear-gradient(white, #0e516a)',\n        justifyContent: 'center',\n      }}\n    >\n      <Stack\n        direction=\"column\"\n        alignItems=\"center\"\n        sx={{ width: '100%', my: 3 }}\n      >\n        <Stack direction=\"row\" justifyContent=\"center\" sx={{ width: '100%' }}>\n          <ProfileAvatar\n            name={pendingMemories[picIndex].owner_details.name}\n            email={pendingMemories[picIndex].owner_details.email}\n            picture={pendingMemories[picIndex].owner_details.picture}\n          />\n          <Typography variant=\"h6\" sx={{ px: 1 }}>\n            {pendingMemories[picIndex].owner_details.given_name}\n          </Typography>\n        </Stack>\n        <Typography sx={{ mb: 2 }}>has shared a memory with you</Typography>\n\n        <Carousel\n          sx={{\n            maxWidth: '700px',\n            width: '95%',\n          }}\n          indicators={false}\n          onChange={(ind) => setPicIndex(ind)}\n          navButtonsAlwaysVisible\n          autoPlay={false}\n        >\n          {pendingMemories.map((mem) => (\n            <Stack\n              key={mem.thumbnail.memory_id}\n              direction=\"column\"\n              spacing={1}\n              alignItems=\"center\"\n            >\n              <ReviewItem\n                title={mem.thumbnail.title}\n                date={mem.thumbnail.date}\n                thumbnailImage={mem.thumbnail.photo.src}\n                thumbnailImageSrcSet=\"\"\n                handleImageLoad={() => {}}\n                handleClick={() => {}}\n              />\n            </Stack>\n          ))}\n        </Carousel>\n        <Stack direction=\"row\" sx={{ m: 1 }}>\n          <Button variant=\"contained\" color=\"primary\" sx={{ m: 1 }}>\n            <Typography variant=\"h6\"> Accept </Typography>\n          </Button>\n          <Button variant=\"contained\" color=\"error\" sx={{ m: 1 }}>\n            <Typography variant=\"h6\"> Reject </Typography>\n          </Button>\n        </Stack>\n      </Stack>\n    </Box>\n  ) : null;\n}\n\nReviewMemories.defaultProps = {\n  memoryID: '',\n};\n\nReviewMemories.propTypes = {\n  memoryID: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport Stack from '@mui/material/Stack';\nimport Badge from '@mui/material/Badge';\n\nimport BasePage from '../base_page';\nimport OwnMemories from './Own';\nimport SharedMemories from './Shared';\nimport ReviewMemories from './Review';\n\nfunction MemoryModes({ mode, handleChange }) {\n  return (\n    <Stack direction=\"row\" justifyContent=\"center\" sx={{ py: 1, backgroundColor: 'button.main' }}>\n      <ToggleButtonGroup\n        color=\"primary\"\n        value={mode}\n        exclusive\n        aria-label=\"Memory Modes\"\n      >\n        <ToggleButton value=\"own\" sx={{ borderRadius: '30px' }} onClick={handleChange}>\n          My Memories\n        </ToggleButton>\n        <ToggleButton value=\"shared\" onClick={handleChange}>\n          Shared With Me\n        </ToggleButton>\n        <ToggleButton value=\"review\" sx={{ borderRadius: '30px' }} onClick={handleChange}>\n          <Badge badgeContent={99} color=\"primary\">\n            Review\n          </Badge>\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </Stack>\n  );\n}\n\nfunction MemoryModeContent({ mode, memoryID }) {\n  if (mode === 'own') {\n    return <OwnMemories />;\n  }\n\n  if (mode === 'shared') {\n    return <SharedMemories />;\n  }\n\n  if (mode === 'review') {\n    return <ReviewMemories memoryID={memoryID} />;\n  }\n}\n\nexport default function Memories({ initMode }) {\n  const params = useParams();\n  const { memoryMode } = params;\n  const [searchParams] = useSearchParams();\n  const [mode, setMode] = useState(initMode);\n\n  useEffect(() => {\n    if (memoryMode) {\n      setMode(memoryMode);\n    } else {\n      setMode(initMode);\n    }\n  }, [memoryMode, initMode]);\n\n  console.log(initMode, memoryMode, params, searchParams);\n\n  const handleChange = (event, newMode) => {\n    setMode(newMode);\n  };\n\n  return (\n    <BasePage>\n      <Stack direction=\"column\">\n        <MemoryModes mode={mode} handleChange={handleChange} />\n        <MemoryModeContent mode={mode} memoryID={searchParams.get('memoryID')} />\n      </Stack>\n    </BasePage>\n  );\n}\n\nMemories.propTypes = {\n  initMode: PropTypes.string.isRequired,\n};\n\nMemoryModes.propTypes = {\n  mode: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n\nMemoryModeContent.defaultProps = {\n  memoryID: '',\n};\n\nMemoryModeContent.propTypes = {\n  mode: PropTypes.string.isRequired,\n  memoryID: PropTypes.string,\n};\n"],"names":["ThumbnailImage","imageSrc","imageSrcSet","title","handleImageLoad","component","src","srcSet","alt","sx","borderColor","borderRadius","textAlign","objectFit","height","lg","sm","xs","onLoad","ThumbnailDetails","date","disableTypography","noWrap","overflow","textOverflow","width","fontWeight","subheader","color","padding","MemoryThumbnail","thumbnailImage","thumbnailImageSrcSet","handleClick","defaultProps","MemoryThumbnailCard","children","onClick","elevation","bgcolor","border","position","CreateMemoryItem","navigate","useNavigate","belowmd","useMediaQuery","theme","breakpoints","down","Grid","item","md","p","Typography","variant","bottom","left","AddOutlined","fontSize","top","transform","LoadMore","handleMoreClick","GridView","memories","nextToken","sortedMemories","sort","a","b","memory_id","container","py","justifyContent","alignItems","map","memory","photo","images","join","memDetails","state","getMemories","handleMemoryCallback","handleTokenCallback","handleThumbnailCallback","api","resp","Promise","all","thumbnails","next_continuation_token","console","log","OwnMemories","useState","setNextToken","memoryIDs","setMemoryIDs","setMemories","count","setCount","grid","setGrid","picLoaded","cnt","handleTokenChange","newToken","addMemories","details","arr","concat","addMemoryIDs","ids","useEffect","length","Skeleton","type","imageLoading","Box","display","SharedMemories","ReviewCard","CardActionArea","Card","ReviewImage","CardMedia","ReviewDetails","CardContent","CardHeader","ReviewItem","ReviewMemories","memoryID","picIndex","setPicIndex","pendingMemories","setPendingMemories","addPendingMemories","getReviewMemories","backgroundColor","backgroundSize","backgroundImage","Stack","direction","my","name","owner_details","email","picture","px","given_name","mb","maxWidth","indicators","onChange","ind","navButtonsAlwaysVisible","autoPlay","mem","spacing","thumbnail","m","Button","MemoryModes","mode","handleChange","ToggleButtonGroup","value","exclusive","ToggleButton","Badge","badgeContent","MemoryModeContent","Memories","initMode","params","useParams","memoryMode","useSearchParams","searchParams","setMode","event","newMode","get"],"sourceRoot":""}