{"version":3,"file":"static/js/148.b05119d8.chunk.js","mappings":"gRAG6C,SAE9BA,EAAe,GAAD,4CAc5B,OAd4B,0BAA7B,WAA8BC,GAAO,4EAEA,OAD7BC,EAAa,CAAC,EACpBC,QAAQC,KAAK,sBAAsB,SAC7BC,QAAQC,WACZC,OAAOC,QAAQP,GAASQ,KAAI,+BAAEC,EAAK,KAAEC,EAAG,YACtCC,MAAMD,GACHE,MAAK,SAACC,GAAI,OAAKA,EAAKC,MAAM,IAC1BF,MAAK,SAACG,GACLd,EAAWQ,GAASM,CACtB,GAAE,KAEN,KAAD,2BAEMd,GAAU,4CAClB,+BAEce,EAAU,EAAD,mDA6BvB,OA7BuB,0BAAxB,WAAyBC,EAASC,EAAMC,EAAoBC,GAAS,8FAC1CrB,EAAemB,GAAM,KAAD,EACjC,OADNjB,EAAU,OAChBmB,IAAY,SACahB,QAAQC,WAC/BY,EAAQT,KAAI,SAACa,GAqBX,OApBe,IAAIjB,SAAQ,SAACkB,GAC1B,IAAQC,EAA0DF,EAA1DE,aAAcC,EAA4CH,EAA5CG,cAAef,EAA6BY,EAA7BZ,MAAOgB,EAAsBJ,EAAtBI,YAAaC,EAASL,EAATK,KACnDC,EAAO1B,EAAWQ,GAClBmB,EAAQ,IAAIC,MAClBD,EAAME,OAAS,SAACC,GACd,IAAQC,EAAQD,EAAEE,OAAVD,IACFE,EAAc,CAClBzB,MAAAA,EACAuB,IAAAA,EACAR,cAAAA,EACAD,aAAAA,EACAE,YAAAA,EACAC,KAAAA,EACAC,KAAAA,GAEFR,EAAmBe,GACnBZ,EAAQY,EACV,EACAN,EAAMI,IAAMG,IAAIC,gBAAgBT,EAClC,GAEF,KACA,KAAD,EAxBe,OAAVU,EAAU,yBAyBTA,EAAW7B,KAAI,SAAC8B,GAAI,OAAKA,EAAKC,KAAK,KAAC,4CAC5C,sBAEc,SAASC,IACtB,IACQC,GADOC,EAAAA,EAAAA,MACPD,UAEFE,EAAU,yCAAG,WACjBC,EACAC,EACA1B,GAAkB,gGAEI2B,EAAAA,EAAAA,WAAsBL,GAAW,KAAD,EAAzC,OAAPM,EAAO,gBACQ/B,EACnB+B,EAAQA,QAAQC,OAChBD,EAAQ7B,KACRC,GACA,WACEyB,EAAiBG,EAAQA,QAAQC,OAAOC,QACxCJ,EAAoBE,EAAQA,QAAQC,OAAOC,OAC7C,IACA,KAAD,EAKE,OAbGD,EAAM,OAUNE,EAAYF,EAAOxC,KAAI,SAACa,GACGA,EAAvBW,IAAuBX,EAAlBM,KACb,OAD0B,OAAKN,EAAG,EAEpC,IAAE,kBACK,CAAE0B,SAAQ,kBAAMA,EAAQA,SAAO,IAAEC,OAAQE,IAAaF,OAAAA,IAAQ,2CACtE,gBArBe,0CAuBhB,OACE,SAAC,IAAW,CACVL,WAAYA,EACZQ,aAAc,kBAAML,EAAAA,EAAAA,cAAyBL,EAAU,EACvDW,SAAS,YAGf,C","sources":["pages/collage/View.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport collageapi from 'api/collage';\n// import helpers from 'components/collage/helpers';\nimport BaseCollage from 'pages/collage/Base';\n\nasync function downloadImages(imgURLS) {\n  const urlFileMap = {};\n  console.time('downloading images');\n  await Promise.allSettled(\n    Object.entries(imgURLS).map(([title, url]) =>\n      fetch(url)\n        .then((resp) => resp.blob())\n        .then((f) => {\n          urlFileMap[title] = f;\n        })\n    )\n  );\n\n  return urlFileMap;\n}\n\nasync function getImages(imgDets, urls, handleImageDetails, startLoad) {\n  const urlFileMap = await downloadImages(urls);\n  startLoad();\n  const tempImages = await Promise.allSettled(\n    imgDets.map((img) => {\n      const result = new Promise((resolve) => {\n        const { naturalWidth, naturalHeight, title, aspectRatio, type } = img;\n        const file = urlFileMap[title];\n        const image = new Image();\n        image.onload = (e) => {\n          const { src } = e.target;\n          const imageDetail = {\n            title,\n            src,\n            naturalHeight,\n            naturalWidth,\n            aspectRatio,\n            type,\n            file,\n          };\n          handleImageDetails(imageDetail);\n          resolve(imageDetail);\n        };\n        image.src = URL.createObjectURL(file);\n      });\n      return result;\n    })\n  );\n  return tempImages.map((elem) => elem.value);\n}\n\nexport default function CollageView() {\n  const params = useParams();\n  const { collageID } = params;\n\n  const getCollage = async (\n    handleImageCount,\n    handleNewImageCount,\n    handleImageDetails\n  ) => {\n    const details = await collageapi.getCollage(collageID);\n    const images = await getImages(\n      details.details.images,\n      details.urls,\n      handleImageDetails,\n      () => {\n        handleImageCount(details.details.images.length);\n        handleNewImageCount(details.details.images.length);\n      }\n    );\n\n    const imageDets = images.map((img) => {\n      const { src, file, ...rest } = img;\n      return rest;\n    });\n    return { details: { ...details.details, images: imageDets }, images };\n  };\n\n  return (\n    <BaseCollage\n      getCollage={getCollage}\n      clearCollage={() => collageapi.deleteCollage(collageID)}\n      saveType=\"existing\"\n    />\n  );\n}\n"],"names":["downloadImages","imgURLS","urlFileMap","console","time","Promise","allSettled","Object","entries","map","title","url","fetch","then","resp","blob","f","getImages","imgDets","urls","handleImageDetails","startLoad","img","resolve","naturalWidth","naturalHeight","aspectRatio","type","file","image","Image","onload","e","src","target","imageDetail","URL","createObjectURL","tempImages","elem","value","CollageView","collageID","useParams","getCollage","handleImageCount","handleNewImageCount","collageapi","details","images","length","imageDets","clearCollage","saveType"],"sourceRoot":""}