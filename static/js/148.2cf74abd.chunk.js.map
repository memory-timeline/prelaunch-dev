{"version":3,"file":"static/js/148.2cf74abd.chunk.js","mappings":"oPAG6C,SAE9BA,EAAa,EAAD,+CA4C1B,OA5C0B,0BAA3B,WAA4BC,EAAUC,GAAK,4EACH,OAAtCC,QAAQC,IAAI,eAAgBH,GAAU,SACnBI,QAAQC,WACzBL,EAASM,IAAG,yCAAC,WAAOC,GAAS,4EAgCxB,OA/BGC,EAAS,IAAIJ,SAAQ,SAACK,GAC1B,IAAMC,EAAQ,IAAIC,MAClBD,EAAME,OAAS,SAACC,GACd,MAAwCA,EAAEC,OACpCC,EADc,EAAZC,aAA2B,EAAbC,cAEdC,EAAgBX,EAAhBW,MAAOC,EAASZ,EAATY,KAETC,EAAUC,EAAAA,EAAAA,eACdX,EACAT,EACAA,EAAQc,EACRI,GAEFjB,QAAQC,IAAI,gBAAiB,CAC3Be,MAAAA,EACAI,IAAKF,EACLH,cAAehB,EAAQc,EACvBC,aAAcf,EACdc,YAAAA,EACAI,KAAAA,IAEFV,EAAQ,CACNS,MAAAA,EACAI,IAAKF,EACLH,cAAehB,EAAQc,EACvBC,aAAcf,EACdc,YAAAA,EACAI,KAAAA,GAEJ,EACAT,EAAMY,IAAMf,EAAUe,GACxB,IAAE,kBACKd,GAAM,2CACd,mDAlCW,KAmCZ,KAAD,EAIC,OAxCIe,EAAI,OAqCVrB,QAAQC,IACN,sBACAoB,EAAKjB,KAAI,SAACkB,GAAI,OAAKA,EAAKC,KAAK,KAC7B,kBACKF,EAAKjB,KAAI,SAACkB,GAAI,OAAKA,EAAKC,KAAK,KAAC,2CACtC,wBAEc,SAASC,IACtB,IACQC,GADOC,EAAAA,EAAAA,MACPD,UAEFE,EAAU,yCAAG,mGAEoC,OAD/CC,EAAW,KACjB5B,QAAQC,IAAI,yCAAyC,SAC/B4B,EAAAA,EAAAA,WAAsBJ,GAAW,KAAD,EACtB,OAD1BK,EAAO,OACPC,EAAWD,EAAQA,QAAQ,EAAD,OACP5B,QAAQC,WAC/B4B,EAASC,OAAO5B,IAAG,yCAAC,WAAO6B,GAAG,8EACO,OAA7Bb,EAAMU,EAAQI,KAAKD,EAAIjB,OAAO,EAAD,OACZmB,MAAMf,GAAKgB,MAAK,SAACC,GAAI,OAAKA,EAAKC,MAAM,IAAE,KAAD,EAC1B,OAD7BC,EAAQ,OACdvC,QAAQC,IAAI,YAAasC,GAAU,qCACvBN,GAAG,IAAEb,IAAKmB,KAAQ,2CAC/B,mDALkB,KAMnB,KAAD,EAC0D,OARrDC,EAAU,OAQVC,EAAiBD,EAAWpC,KAAI,SAACkB,GAAI,OAAKA,EAAKC,KAAK,IAAE,EAAD,QACtC1B,EAAa4C,EAAgBb,GAAU,KAAD,GACI,OADzDI,EAAM,OACZhC,QAAQC,IAAI,cAAeuC,EAAYC,EAAgBT,GAAQ,kBACxD,CAAEF,QAASC,EAAUC,OAAAA,EAAQS,eAAAA,IAAgB,4CACrD,kBAjBe,mCAmBhB,OACE,SAAC,UAAW,CACVd,WAAYA,EACZe,aAAc,WAAO,EACrBC,SAAS,YAGf,C","sources":["pages/collage/View.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport collageapi from 'api/collage';\nimport helpers from 'components/collage/helpers';\nimport BaseCollage from 'pages/collage/Base';\n\nasync function resizeImages(imageArr, width) {\n  console.log('images array', imageArr);\n  const imgs = await Promise.allSettled(\n    imageArr.map(async (imageElem) => {\n      const result = new Promise((resolve) => {\n        const image = new Image();\n        image.onload = (e) => {\n          const { naturalWidth, naturalHeight } = e.target;\n          const aspectRatio = naturalWidth / naturalHeight;\n          const { title, type } = imageElem;\n\n          const dataurl = helpers.downscaleImage(\n            image,\n            width,\n            width / aspectRatio,\n            type\n          );\n          console.log('image loading', {\n            title,\n            src: dataurl,\n            naturalHeight: width / aspectRatio,\n            naturalWidth: width,\n            aspectRatio,\n            type,\n          });\n          resolve({\n            title,\n            src: dataurl,\n            naturalHeight: width / aspectRatio,\n            naturalWidth: width,\n            aspectRatio,\n            type,\n          });\n        };\n        image.src = imageElem.src;\n      });\n      return result;\n    })\n  );\n  console.log(\n    'images after resize',\n    imgs.map((elem) => elem.value)\n  );\n  return imgs.map((elem) => elem.value);\n}\n\nexport default function CollageView() {\n  const params = useParams();\n  const { collageID } = params;\n\n  const getCollage = async () => {\n    const maxWidth = 1500;\n    console.log('use effect making call to get collage');\n    const details = await collageapi.getCollage(collageID);\n    const collDets = details.details;\n    const tempImages = await Promise.allSettled(\n      collDets.images.map(async (img) => {\n        const src = details.urls[img.title];\n        const imageSRC = await fetch(src).then((resp) => resp.text());\n        console.log('image SRC', imageSRC);\n        return { ...img, src: imageSRC };\n      })\n    );\n    const originalImages = tempImages.map((elem) => elem.value);\n    const images = await resizeImages(originalImages, maxWidth);\n    console.log('temp images', tempImages, originalImages, images);\n    return { details: collDets, images, originalImages };\n  };\n\n  return (\n    <BaseCollage\n      getCollage={getCollage}\n      clearCollage={() => {}}\n      saveType=\"existing\"\n    />\n  );\n}\n"],"names":["resizeImages","imageArr","width","console","log","Promise","allSettled","map","imageElem","result","resolve","image","Image","onload","e","target","aspectRatio","naturalWidth","naturalHeight","title","type","dataurl","helpers","src","imgs","elem","value","CollageView","collageID","useParams","getCollage","maxWidth","collageapi","details","collDets","images","img","urls","fetch","then","resp","text","imageSRC","tempImages","originalImages","clearCollage","saveType"],"sourceRoot":""}