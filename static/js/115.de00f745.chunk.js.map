{"version":3,"file":"static/js/115.de00f745.chunk.js","mappings":"4NAQA,SAASA,EAAe,GAAoD,IAAlDC,EAAQ,EAARA,SAAUC,EAAW,EAAXA,YAAaC,EAAK,EAALA,MAAOC,EAAe,EAAfA,gBACtD,OACE,SAAC,IAAS,CACRC,UAAU,MACVC,IAAKL,EACLM,OAAQL,EACRM,IAAKL,EACLM,GAAI,CACFC,UAAW,SACXC,UAAW,QACXC,OAAQ,CACNC,GAAI,IACJC,GAAI,IACJC,GAAI,MAGRC,OAAQZ,GAGd,CAEA,SAASa,EAAiB,GAAkC,IAAhCd,EAAK,EAALA,MAAOe,EAAI,EAAJA,KAAMC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAC/C,OACE,SAAC,IAAW,WACV,SAAC,IAAU,CACTC,mBAAiB,EACjBF,OAAQA,EACRhB,OACE,UAAC,IAAU,CACTmB,QAAM,EACNb,GAAI,CACFc,SAAU,SACVC,aAAc,WACdC,MAAO,CAAEV,GAAI,YAAaW,GAAI,cAC9BC,WAAY,KACZ,UAEDxB,EACW,KAAXiB,GACC,gCACG,KACD,SAAC,IAAI,CACHQ,MAAOR,EACPS,KAAK,QACLC,QAAQ,SACRC,MAAkB,WAAXX,EAAsB,UAAY,UACzCX,GAAI,CAAEG,OAAQ,aAGhB,QAGRoB,WAAW,SAAC,IAAU,CAACvB,GAAI,CAAEsB,MAAO,cAAe,SAAEb,IACrDT,GAAI,CACFwB,QAAS,EACTF,MAAO,kBAKjB,CAEe,SAASG,EAAgB,GASpC,IARF/B,EAAK,EAALA,MACAe,EAAI,EAAJA,KACAC,EAAM,EAANA,OACAC,EAAM,EAANA,OACAe,EAAc,EAAdA,eACAC,EAAoB,EAApBA,qBACAC,EAAW,EAAXA,YACAjC,EAAe,EAAfA,gBAEA,OACE,UAAC,IAAmB,CAACiC,YAAaA,EAAY,WAC5C,SAACrC,EAAc,CACbC,SAAUkC,EACVjC,YAAakC,EACbjC,MAAOA,EACPC,gBAAiBA,KAEnB,SAACa,EAAgB,CACfd,MAAOA,EACPe,KAAMA,EACNC,OAAQA,EACRC,OAAQA,MAIhB,CAEAH,EAAiBqB,aAAe,CAC9BnC,MAAO,yBACPe,KAAM,cACNC,OAAQ,GACRC,OAAQ,IAUVpB,EAAesC,aAAe,CAC5BnC,MAAO,yBACPF,SAAU,GACVC,YAAa,GACbE,gBAAiB,WAAO,GAU1B8B,EAAgBI,aAAe,CAC7BF,qBAAsB,GACtBhC,gBAAiB,WAAO,EACxBe,OAAQ,GACRC,OAAQ,G,6FC7HK,SAASmB,EAAoB,GAA4B,IAA1BF,EAAW,EAAXA,YAAaG,EAAQ,EAARA,SAGzD,OACE,SAAC,IAAc,CAACC,QAASJ,EAAY,UACnC,SAAC,IAAI,CACHK,UAAW,EACXjC,GAAI,CACFkC,QAAS,OACTC,aAAc,EAEdb,MAAO,QACPc,SAAU,WACVjC,OAAQ,CACNC,GAAI,IACJC,GAAI,IACJC,GAAI,KAEN,UAAW,CACT+B,OAAQ,EACRC,YAAa,iBACbL,UAAW,IAEb,SAEDF,KAIT,C,6KC3Be,SAASQ,EAAe,GAAoC,IAAlCC,EAAI,EAAJA,KAAMC,EAAgB,EAAhBA,iBAAkBC,EAAK,EAALA,MAC/D,OACE,SAACC,EAAA,EAAO,WACN,SAACC,EAAA,EAAG,CAAC5C,GAAI,CAAE6C,QAAS,OAAQC,eAAgB,SAAUC,EAAG,GAAI,UAC3D,SAACC,EAAA,EAAiB,CAChBC,WAAS,EACTC,MAAOV,EACP,aAAW,cACXlB,MAAM,UACNtB,GAAI,CAAEkC,QAAS,eAAgB,SAE9BQ,EAAMS,KAAI,SAACC,GAAQ,OAClB,SAACC,EAAA,EAAY,CAEXH,MAAOE,EACPpB,QAAS,kBAAMS,EAAiB,GAAD,OAAIW,GAAW,EAC9CpD,GAAI,CAAEqC,OAAQ,EAAGC,YAAa,gBAAiB,UAE/C,SAACgB,EAAA,EAAU,CAACjC,QAAQ,KAAI,SAAE+B,KALrBA,EAMQ,SAM3B,C,iFC3Be,SAASG,EAAY,GAAsC,IAApCC,EAAM,EAANA,OAAQC,EAAU,EAAVA,WAAY7B,EAAW,EAAXA,YACxD,OACE,SAAC8B,EAAA,EAAO,CAACD,WAAYA,EAAYE,kBAAgB,EAAC3D,GAAI,CAAE4D,GAAI,GAAI,SAC7DJ,EAAOL,KAAI,SAAChC,EAAO0C,GAAK,OACvB,SAACC,EAAA,EAAI,CAAa9B,QAASJ,EAAYiC,GAAO,UAC5C,SAACE,EAAA,EAAS,UAAE5C,KADHA,EAEJ,KAIf,C,aCbA,SAAS6C,EACPC,EACAC,EACAC,EACAzE,EACA0E,EACAC,EACAC,GAEA,IAAMC,EAAYH,EAAajB,KAAI,SAACqB,EAAQX,GAC1C,IAAMY,EAAUJ,EAAWR,GAC3B,MAAO,CACLa,IAAK,CAAC,WAAYP,EAAW,SAAUK,EAAOG,MAAMC,KAAK,KACzDC,KAAMJ,EACNK,YAAaL,EAAQM,KAEzB,IACMC,EAAiBC,EAAAA,EAAAA,qBACrBhB,EACAC,EACAK,EACAD,GAEF,OAAOY,QAAQC,WAAWH,EAC5B,CAAC,SAEcI,EAAgB,EAAD,iDAW7B,OAX6B,0BAA9B,WAA+BnB,EAAQC,EAASmB,GAAa,8EACV,OAA3CC,EAAcC,KAAKC,UAAUH,GAAe,EAAD,OACtBJ,EAAAA,EAAAA,gBACzBhB,EACAC,EACAoB,GACA,KAAD,EAJiB,GAKU,WALtBG,EAAY,QAKDC,OAAkB,0CAC1B,GAAK,iCAEgB,IAAvBD,EAAaE,OAAc,4CACnC,+BAEcC,EAAc,EAAD,iDAY3B,OAZ2B,0BAA5B,WAA6B3B,EAAQC,EAASmB,GAAa,gFAIxD,OAHKC,EAAcC,KAAKC,UAAUH,GAC7BQ,EAAmB,CAAC,WAAYR,EAAcS,IAAK,gBAAgBlB,KACvE,KACA,EAAD,OACwBK,EAAAA,EAAAA,OACvBhB,EACAC,EACA2B,EACAP,GACA,KAAD,EALe,OAAVS,EAAU,yBAMTA,IAAgC,IAAlBA,EAAWC,IAAW,4CAC5C,sBAED,IAAMC,EAAgB,yCAAG,WACvBhC,EACAC,EACAmB,EACAa,EACAC,EACAC,GAAU,8EAG+B,OADzCF,EAAe,GACfE,EAAW,uBAAuB,GAAO,SACrBhB,EAAgBnB,EAAQC,EAASmB,GAAe,KAAD,EAAxD,IAEG,KAFRgB,EAAK,QAEO,iCACAT,EAAc3B,EAAQC,EAASmB,GAAe,KAAD,EAA7DiB,EAAO,OACPH,EAAoB,sBAAuBG,GAC3CJ,EAAe,IAAI,wBAEnBC,EAAoB,sBAAuB,UAAU,iCAEhDE,GAAK,4CACb,gBApBqB,gDAsBhBE,EAAY,yCAAG,WACnBtC,EACAC,EACAC,EACAzE,EACA0E,EACAC,EACAC,EACA4B,GAAc,8FAEclC,EAC1BC,EACAC,EACAC,EACAzE,EACA0E,EACAC,EACAC,GACA,KAAD,EARKkC,EAAa,OASVC,EAAI,EAAE,KAAD,OAAEA,EAAID,EAAcE,QAAM,oBAER,aAA5BF,EAAcC,GAAGf,SACa,IAA9Bc,EAAcC,GAAGvD,MAAM8C,GAAW,0CAE3B,GAAK,OAL0BS,GAAK,EAAC,uBAQ7B,OAAnBP,EAAe,IAAI,mBACZ,GAAI,4CACZ,gBA7BiB,oDA+BZS,EAAY,yCAAG,WACnB1C,EACAC,EACAmB,EACAa,EACAC,EACAC,EACA/B,EACAC,GAAmB,4FAGU2B,EAC3BhC,EACAC,EACAmB,EACAa,EACAC,EACAC,GACA,KAAD,EAPmB,IAUG,IAVH,OAUO,iCAEHG,EACpBtC,EACAC,EACAmB,EAAcS,IACdT,EAAc3F,MACd2F,EAAcjB,aACdC,EACAC,EACA4B,GACA,KAAD,EATY,IAWS,IAXT,OAWa,kCACMjB,EAAAA,EAAAA,eAC5BhB,EACAC,EACAmB,EAAcS,KACd,KAAD,GAJoB,GAAfc,EAAe,OAKjBC,SAASD,EAAgBE,SAAU,MAAQzB,EAAcS,IAAG,2CACvD,GAAK,kCAEP,GAAI,QAEbK,EAAoB,4BAA6B,UAAU,kCAGtD,GAAK,4CACb,gBAjDiB,oDAmDlB,GAAiBQ,aAAAA,G,8FC5JF,SAASI,EAAkB,GAAY,IAAVrH,EAAK,EAALA,MAC1C,OACE,SAACsH,EAAA,EAAU,CACTtH,MAAOA,EACPM,GAAI,CACFqC,OAAQ,EACRC,YAAa,eACbrC,UAAW,SACXe,MAAO,EACPiG,GAAI,EACJ/E,QAAS,cACTa,EAAG,EACHa,GAAI,EACJzB,aAAc,IAItB,C,sECjBe,SAAS+E,EAAiB,GAAmC,IAAjC/F,EAAK,EAALA,MAAOS,EAAW,EAAXA,YAAauF,EAAQ,EAARA,SAC7D,OACE,SAACC,EAAA,EAAM,CACLpF,QAASJ,EACTuF,SAAUA,EACVnH,GAAI,CACFqH,EAAG,EACHhF,OAAQ,EACRC,YAAa6E,EAAW,aAAe,eACvChF,aAAc,EACdD,QAAS,oBACT,SAEDf,GAGP,CCfe,SAASmG,EAAsB,GAK1C,IAJFC,EAAU,EAAVA,WACAC,EAAc,EAAdA,eACAC,EAAM,EAANA,OACAC,EAAO,EAAPA,QAEA,OACE,UAAC9E,EAAA,EAAG,CACF5C,GAAI,CACF6C,QAAS,OACT8E,cAAe,MACfC,GAAI,EACJ5G,MAAO,EACP8B,eAAgB,gBAChB,UAED4E,GACC,SAACR,EAAgB,CAACC,UAAQ,EAACvF,YAAa,WAAO,EAAGT,MAAM,UAExD,SAAC+F,EAAgB,CAACtF,YAAa4F,EAAgBrG,MAAM,SAEtDsG,GACC,SAACP,EAAgB,CAACtF,YAAa2F,EAAYpG,MAAM,mBAEjD,SAAC+F,EAAgB,CAACtF,YAAa2F,EAAYpG,MAAM,WAIzD,CC7Be,SAAS0G,EAAQ,GAAe,IAAb9F,EAAQ,EAARA,SAChC,OACE,SAACa,EAAA,EAAG,CACFhD,UAAU,OACVI,GAAI,CACF,uBAAwB,CACtBqH,EAAG,EACHS,SAAU,MACV9G,MAAO,QAET,2BAA4B,CAC1B+G,gBAAiB,aACjB5F,aAAc,GAEhBwF,cAAe,SACf9E,QAAS,OACTmF,WAAY,SACZhH,MAAO,OACP4G,GAAI,GAENK,aAAa,OAAM,SAElBlG,GAGP,CFPAmF,EAAiBrF,aAAe,CAC9BsF,UAAU,G,cGTG,SAASe,EAAc,GAUlC,IATFxI,EAAK,EAALA,MACAe,EAAI,EAAJA,KACA0H,EAAiB,EAAjBA,kBACAC,EAAgB,EAAhBA,iBACAb,EAAU,EAAVA,WACAC,EAAc,EAAdA,eACAC,EAAM,EAANA,OACAC,EAAO,EAAPA,QACAjE,EAAU,EAAVA,WAEA,GAAoC4E,EAAAA,EAAAA,UAAS,IAAG,eAAzCC,EAAU,KAAEC,EAAa,KAChC,GAAkCF,EAAAA,EAAAA,UAAS,IAAG,eAAvCG,EAAS,KAAEC,EAAY,KAE9B,GAAwCJ,EAAAA,EAAAA,WAAS,GAAM,eAAhDK,EAAY,KAAEC,EAAe,KACpC,GAAsCN,EAAAA,EAAAA,WAAS,GAAM,eAA9CO,EAAW,KAAEC,EAAc,KAE5BC,EAAcC,EAAAA,GACV,CACNrJ,MAAOqJ,EAAAA,KAEJC,SAAS,4BACTC,IAAI,GAAI,0CAEZD,WAEGE,EAAaH,EAAAA,GACT,CACNtI,KAAMsI,EAAAA,GAEF,wEAEDC,SAAS,2BACTG,aAEJH,WAEGI,EAAO,yCAAG,2GACWC,EAAAA,EAAAA,aACvB,QACA3J,EACA6I,EACAO,GACA,KAAD,EALe,OAAVQ,EAAU,gBAMQD,EAAAA,EAAAA,aACtB,OACA5I,EACAgI,EACAS,GACA,KAAD,EALc,OAATK,EAAS,yBAMRD,GAAcC,GAAS,2CAC/B,kBAdY,oCAgBbC,EAAAA,EAAAA,YAAU,WACJd,GACFW,EAAAA,EAAAA,aAAmB,QAAS3J,EAAO6I,EAAeO,GAEhDF,GACFS,EAAAA,EAAAA,aAAmB,OAAQ5I,EAAMgI,EAAcS,EAEnD,GAAG,CAACxJ,EAAOe,IAEX,IAAMgJ,EAAU,yCAAG,WAAOC,GAAc,sFAClBN,IAAU,KAAD,EAAlB,QAETM,IACD,2CACF,gBALe,sCAiBhB,OACE,UAAC7B,EAAO,YACN,SAAC8B,EAAA,EAAS,CACRX,UAAQ,EACRY,SAdgB,SAACC,GACrBlB,GAAgB,GAChBR,EAAkB0B,EACpB,EAYMC,GAAG,oBACH3I,MAAM,cACN4I,aAAcrK,EACdsK,WAAY1B,GAAc,4BAC1B2B,QAAS3B,KAEX,SAAC4B,EAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAe,UAChD,SAACC,EAAA,EAAU,CACTlJ,MAAM,cACN+B,MAAOzC,EACPmJ,SApBa,SAACC,GACpBhB,GAAe,GACfT,EAAiByB,EACnB,EAkBQS,YAAY,aACZC,YAAY,aACZC,QAAS,IAAIC,KACbC,YAAa,SAACC,GAAK,OACjB,SAAChB,EAAA,GAAS,gBACRiB,UAAQ,EACR5B,UAAQ,GAEJ2B,GAAK,IACTV,QAASzB,EACTwB,WAAYxB,GAAa,KACzB,OAIR,SAAClB,EAAqB,CACpB7D,WAAYA,EACZ8D,WAAY,kBAAMkC,EAAWlC,EAAW,EACxCC,eAAgBA,EAChBC,OAAQA,EACRC,QAASA,MAIjB,CAEAQ,EAAcrG,aAAe,CAC3BpB,KAAM,I,gDCpIO,SAASoK,GAAU,GAAW,IAATC,EAAI,EAAJA,KAClC,OAAO,SAACxH,EAAA,EAAU,CAACtD,GAAI,CAAEsB,MAAO,cAAe,SAAEwJ,GACnD,C,iHCSe,SAASC,GAAe,GAQnC,IAPF3G,EAAY,EAAZA,aACA4G,EAAiB,EAAjBA,kBACAC,EAAS,EAATA,UACAC,EAAqB,EAArBA,sBACAC,EAAmB,EAAnBA,oBAIAC,QAAQC,IAAIjH,GACZ,OAA4BiE,EAAAA,EAAAA,UAAS,IAAG,eAAjCiD,EAAM,KAAEC,EAAS,KACxB,GAAwClD,EAAAA,EAAAA,UAAS,MAAK,eAA/CmD,EAAY,KAAEC,EAAe,KACpC,GAAwBpD,EAAAA,EAAAA,WAAS,GAAM,eAAhCqD,EAAI,KAAEC,EAAO,KAEdC,EAAS,WAAH,OACVxH,EAAajB,KAAI,SAAC0I,EAAOhI,GAAK,MAAM,CAClC9D,IAAK8D,EACLhE,IAAKgM,EAAMC,IACX9K,MAAO6K,EAAM7K,MACbb,OAAQ0L,EAAM1L,OACd4L,QAASF,EAAME,SAAW,GAC3B,GAAG,GAENvC,EAAAA,EAAAA,YAAU,kBAAM+B,EAAUK,EAAO,GAAE,CAACxH,IACpCgH,QAAQC,IAAIC,GA6CZ,OADAF,QAAQC,IAAIG,GACLF,EAAO5E,QACZ,UAAC9D,EAAA,EAAG,CAAChD,UAAU,MAAMI,GAAI,CAAE4D,GAAI,GAAI,WACjC,SAACjB,EAAA,EAAO,KACR,SAACW,EAAA,EAAU,CAACtD,GAAI,CAAE+C,EAAG,GAAK1B,QAAQ,KAAK2K,MAAM,SAAQ,SAAC,qBAGtD,SAACC,GAAA,EAAgB,CAACX,OAAQA,EAAQY,YAvCjB,SAAH,OAChBC,EAAM,EAANA,OAAO,EAAD,EACNC,WAAcrM,EAAG,EAAHA,IAAKsM,EAAK,EAALA,MAAiBC,GAAL,EAAL5M,OAAwB,sBAElD,UAAC0H,EAAA,EAAM,CAACxH,UAAU,MAAMI,GAAI,CAAEwB,QAAS,OAAQ,WAC7C,wBACEzB,IAAKA,EAELsM,OAAK,kBAAOA,GAAK,IAAErL,MAAOmL,EAAOnL,MAAOQ,QAAS,KAE7C8K,IAELH,EAAOtI,QAAUoH,GAChB,SAACsB,GAAA,EAAyB,CACxB1I,MAAOsI,EAAOtI,MACdmH,kBAAmBA,IAEnB,MACJ,SAACwB,GAAA,EAAgB,CACf3I,MAAOsI,EAAOtI,MACdoH,UAAWA,EACXC,sBAAuBA,KAEzB,SAACuB,GAAA,EAAgB,CACf7K,YAAa,kBA7BSiC,EA6BgBsI,EAAOtI,MA5BjD4H,EAAgB5H,QAChB8H,GAAQ,GAFiB,IAAC9H,CA6B6B,EACnDkI,QACE,YAAaT,EAAOa,EAAOtI,OAASyH,EAAOa,EAAOtI,OAAOkI,QAAU,OAGhE,IAWW,OAAjBP,GACC,SAACkB,GAAA,EAAkB,CACjBC,aACE,YAAarB,EAAOE,GAChBF,EAAOE,GAAcO,QACrB,GAENlI,MAAO2H,EACP3L,IAAKuE,EAAaoH,GAAcM,IAChCJ,KAAMA,EACNkB,YA5DY,WAClBnB,EAAgB,MAChBE,GAAQ,EACV,EA0DQkB,aAAc1B,IAEd,QAEJ,IACN,CCzFe,SAAS2B,GAAU,GAa9B,IAZF1I,EAAY,EAAZA,aACA6G,EAAS,EAATA,UACA8B,EAAyB,EAAzBA,0BACA7B,EAAqB,EAArBA,sBACA8B,EAAmB,EAAnBA,oBACAzF,EAAU,EAAVA,WACAC,EAAc,EAAdA,eACAC,EAAM,EAANA,OACAC,EAAO,EAAPA,QACAyD,EAAmB,EAAnBA,oBAMA,GAAoC9C,EAAAA,EAAAA,UAAS,IAAG,eAAzC4E,EAAU,KAAEC,EAAa,KAChC,GAA8B7E,EAAAA,EAAAA,WAAS,GAAM,eAAtC8E,EAAO,KAAEC,EAAU,KAC1B,GAAsC/E,EAAAA,EAAAA,UAAS,GAAE,eAA1CgF,EAAW,KAAEC,EAAc,KAClC,GAAwBjF,EAAAA,EAAAA,WAAS,GAAM,eAAhCqD,EAAI,KAAEC,EAAO,KAEpB,SAASvC,IACP,IAAI/C,GAAQ,EAYZ,OAXA6G,EAAc,IACV9I,EAAasC,OATM,IAUrBwG,EAAc,6CACd7G,GAAQ,GAGNjC,EAAasC,OAfM,KAgBrBwG,EAAc,sCAAD,OAhBQ,KAiBrB7G,GAAQ,GAGHA,CACT,EAEAmD,EAAAA,EAAAA,YAAU,WACJ2D,GAAS/D,GACf,GAAG,CAAChF,EAAc+I,KAElB3D,EAAAA,EAAAA,YAAU,WACJ6D,EAAcjJ,EAAasC,QAC7B4G,EAAelJ,EAAasC,QAE1B2G,EAAcjJ,EAAasC,QAC7BiF,GAAQ,GAEN0B,IAAgBjJ,EAAasC,QAC/BiF,GAAQ,EAEZ,GAAG,CAACvH,EAAciJ,IAqBlB,OACE,UAACxF,EAAO,YACN,SAAC0F,EAAA,GAAI,CAACC,MAAI,YACR,SAACC,GAAA,EAAS,CAACC,aAhBS,SAAC7D,GACzBuD,GAAW,GACPvD,EAAM8D,OAAOC,OACfN,EAAezD,EAAM8D,OAAOC,MAAMlH,OAAStC,EAAasC,QAE1DqG,EAA0BlD,EAAOT,EACnC,OAYI,UAACmE,EAAA,GAAI,CAACC,MAAI,EAACK,WAAS,EAACC,UAAU,SAAS9F,WAAW,SAAQ,WACzD,UAAC1E,EAAA,EAAU,CAAChC,MAAM,OAAOtB,GAAI,CAAE+N,UAAW,GAAI,UAAC,0BACrB3J,EAAasC,OAAO,IAjE3B,OAmEnB,SAACmE,GAAS,CAACC,KAAMmC,QAEnB,SAAC3F,EAAqB,CACpBC,WAAY,kBA/BImC,EA+BenC,OA9B/B6B,KACFM,KAFiB,IAACA,CA+B0B,EAC1ClC,eAAgBA,EAChBC,OAAQA,EACRC,QAASA,KAEX,SAAC6F,EAAA,GAAI,CAACC,MAAI,YACR,SAACzC,GAAc,CACb3G,aAAcA,EACd4G,kBAzBkB,SAACnH,GACzByJ,GAAe,SAACU,GAAS,OAAKA,EAAY,CAAC,IAC3ChB,EAAoBnJ,EACtB,EAuBQoH,UAAWA,EACXC,sBAAuBA,EACvBC,oBAAqBA,OAKzB,SAAC8C,EAAA,EAAM,CACLvC,KAAMA,EACNwC,WAAS,EACTlO,GAAI,CACF+C,EAAG,GACH,UAEF,UAACoL,EAAA,EAAI,CAACnO,GAAI,CAAE8H,SAAU,EAAG/E,EAAG,GAAI,WAC9B,SAACiE,EAAA,EAAU,CAACtH,MAAM,gBAAgBM,GAAI,CAAEC,UAAW,aACnD,SAAC0C,EAAA,EAAO,KACR,UAACyL,GAAA,EAAW,YACV,UAAC9K,EAAA,EAAU,CAACjC,QAAQ,KAAKrB,GAAI,CAAEsB,MAAO,cAAe,UAAC,yBAEnD8C,EAAasC,OAAO,IAnGR,OAqGf,SAAC2H,EAAA,EAAK,CAACvL,eAAe,SAAS9C,GAAI,CAAE4D,GAAI,GAAI,UAC3C,SAACN,EAAA,EAAU,CAACjC,QAAQ,KAAKC,MAAM,QAAO,SACnC2L,gBAQjB,C,gBCzIe,SAASqB,GAAY,GAA2C,IAAzCC,EAAU,EAAVA,WAAYC,EAAK,EAALA,MAAOC,EAAiB,EAAjBA,kBACjDC,GAAWC,EAAAA,EAAAA,UAMjB,OAJAnF,EAAAA,EAAAA,YAAU,WACRkF,EAASE,QAAQC,OACnB,GAAG,KAGD,SAACjM,EAAA,EAAG,CACF5C,GAAI,CACF+C,EAAG,EACHsE,EAAG,EACHyH,GAAI,EACJzM,OAAQ,EACRC,YAAaiM,EAAa,aAAe,eACzCrM,QAAS,mBACT6M,UAAW,QACX5M,aAAc,GAEhBH,QAAS,kBAAM0M,EAASE,QAAQC,OAAO,EAAC,UAExC,SAACG,GAAA,EAAgB,CACfC,WAAS,EACT,aAAW,iBACX3E,YAAY,qBACZpH,MAAOsL,EACP5E,SAAU6E,EACVpC,MAAO,CACLrL,MAAO,OACP+N,UAAW,QACXG,UAAW,OACXC,UAAW,aACXC,WAAY,MACZ/M,OAAQ,EACRvB,SAAU,OACVuO,QAAS,OACTC,OAAQ,WACRnN,aAAc,EACd,UAAW,CACTE,OAAQ,IAGZkN,IAAKb,KAIb,CC3Ce,SAASc,GAAU,GAQ9B,IAPFhB,EAAK,EAALA,MACAC,EAAiB,EAAjBA,kBACAlH,EAAU,EAAVA,WACAC,EAAc,EAAdA,eACAC,EAAM,EAANA,OACAC,EAAO,EAAPA,QACA+H,EAAc,EAAdA,eAEMC,EAAiB,IACvB,GAAoCrH,EAAAA,EAAAA,UAAS,IAAG,eAAzCkG,EAAU,KAAEoB,EAAa,KAYhC,OACE,iCACE,SAACrB,GAAW,CACVC,WAAYA,EACZC,MAAOA,EACPC,kBAAmBA,KAErB,SAAC7L,EAAA,EAAG,CAAC5C,GAAI,CAAE+C,EAAG,EAAGsE,EAAG,GAAI,UACtB,SAACwD,GAAS,CAACC,KAAMyD,OAEnB,SAACjH,EAAqB,CACpBC,WAAY,kBArBEmC,EAqBenC,OApBdiH,EACJ9H,QAAUgJ,GACvBC,EAAc,IACdjG,KAEAiG,EAAc,4BAAD,OAA6BD,KAN3B,IAAChG,CAqB0B,EACxClC,eAAgBA,EAChBC,OAAQA,EACRC,QAASA,IAEV+H,IAGP,C,oDCnCA,SAASG,GAAwB,GAAY,IAAV1M,EAAK,EAALA,MACjC,OACE,UAACN,EAAA,EAAG,CAAC5C,GAAI,CAAE6C,QAAS,OAAQmF,WAAY,SAAUf,GAAI,GAAI,WACxD,SAACrE,EAAA,EAAG,CAAC5C,GAAI,CAAEgB,MAAO,OAAQ6O,GAAI,GAAI,UAChC,SAACC,GAAA,EAAc,CAACzO,QAAQ,cAAc6B,MAAOA,OAE/C,SAACN,EAAA,EAAG,CAAC5C,GAAI,CAAE+P,SAAU,IAAK,UACxB,SAACzM,EAAA,EAAU,CAACjC,QAAQ,QAAQC,MAAM,iBAAgB,mBAC5C0O,KAAKC,MAAM/M,GAAM,WAK/B,CAEA,SAASgN,GAAgB,GAAoB,IACvCC,EADqBC,EAAO,EAAPA,QAASC,EAAI,EAAJA,KAUlC,OAPEF,EADW,WAATE,GACW,SAAC/M,EAAA,EAAU,CAAChC,MAAM,aAAY,SAAC,YAC1B,IAAT+O,GACI,SAAC/M,EAAA,EAAU,CAAChC,MAAM,eAAc,SAAC,UAEjC,SAACgP,GAAA,EAAgB,CAAClP,KAAM,MAIrC,UAACwB,EAAA,EAAG,CAAC5C,GAAI,CAAE6C,QAAS,OAAQmF,WAAY,iBAAkB,WACxD,SAACpF,EAAA,EAAG,CAAC5C,GAAI,CAAEgB,MAAO,OAAQ6O,GAAI,GAAI,UAChC,SAACvM,EAAA,EAAU,UAAE8M,OAEf,SAACxN,EAAA,EAAG,CAAC5C,GAAI,CAAE+P,SAAU,IAAK,SAAEI,MAGlC,CAEA,SAASI,GAAqB,GAAwB,IAAtBC,EAAQ,EAARA,SAAUC,EAAO,EAAPA,QACxC,OAAiB,MAAbD,GAEA,iCACE,UAAC5N,EAAA,EAAG,CACF5C,GAAI,CACF6C,QAAS,OACTC,eAAgB,SAChBkF,WAAY,SACZX,EAAG,GACH,WAEF,SAACqJ,GAAA,EAAsB,CACrBpP,MAAM,UACNqP,SAAS,QACT3Q,GAAI,CAAE6P,GAAI,MAEZ,SAACvM,EAAA,EAAU,CAACjC,QAAQ,KAAKC,MAAM,eAAc,SAAC,oCAKhD,UAACsB,EAAA,EAAG,CACF5C,GAAI,CACF6C,QAAS,OACTmF,WAAY,SACZlF,eAAgB,UAChB,WAEF,SAACF,EAAA,EAAG,WACF,SAACU,EAAA,EAAU,UAAC,uCAEd,SAACV,EAAA,EAAG,CAAC5C,GAAI,CAAE4Q,GAAI,GAAI,UACjB,SAACtN,EAAA,EAAU,CAACjC,QAAQ,KAAKC,MAAM,eAAc,SAC1CmP,OAGL,SAAC7N,EAAA,EAAG,WACF,SAACU,EAAA,EAAU,UAAC,qBAMJ,IAAdkN,GAEA,iCACE,UAAC5N,EAAA,EAAG,CACF5C,GAAI,CACF6C,QAAS,OACTC,eAAgB,SAChBkF,WAAY,SACZX,EAAG,GACH,WAEF,SAACwJ,GAAA,EAAgB,CAACvP,MAAM,QAAQqP,SAAS,QAAQ3Q,GAAI,CAAE6P,GAAI,MAC3D,SAACvM,EAAA,EAAU,CAACjC,QAAQ,KAAKC,MAAM,eAAc,SAAC,+BAKhD,UAACsB,EAAA,EAAG,CACF5C,GAAI,CACF6C,QAAS,OACTmF,WAAY,SACZlF,eAAgB,UAChB,WAEF,SAACF,EAAA,EAAG,WACF,SAACU,EAAA,EAAU,UAAC,uCAEd,SAACV,EAAA,EAAG,CAAC5C,GAAI,CAAE4Q,GAAI,GAAI,UACjB,SAACtN,EAAA,EAAU,CAACjC,QAAQ,KAAKC,MAAM,eAAc,SAC1CmP,OAGL,SAAC7N,EAAA,EAAG,WACF,SAACU,EAAA,EAAU,UAAC,oBAMf,IACT,CAEe,SAASwN,GAAqB,GAA+B,IAA7BpF,EAAI,EAAJA,KAAM8E,EAAQ,EAARA,SAAUO,EAAQ,EAARA,SAC7D,GAA8B1I,EAAAA,EAAAA,UAAS,GAAE,eAAlCoI,EAAO,KAAEO,EAAU,KAa1B,OAZAxH,EAAAA,EAAAA,YAAU,WACR,IAAIyH,EAIJ,OAHIR,EAAU,IACZQ,EAAUC,YAAW,kBAAMF,EAAWP,EAAU,EAAE,GAAE,MAE/C,kBAAMU,aAAaF,EAAS,CACrC,GAAG,CAACR,KAEJjH,EAAAA,EAAAA,YAAU,WACS,MAAbgH,IAAkC,IAAdA,GAAiBQ,EAAW,EACtD,GAAG,CAACR,KAGF,SAACvC,EAAA,EAAM,CACLvC,KAAMA,EACNwC,WAAS,EACTlO,GAAI,CACF+C,EAAG,GACH,UAEF,UAACoL,EAAA,EAAI,CAACnO,GAAI,CAAE8H,SAAU,EAAG/E,EAAG,GAAI,WAC9B,SAACiE,EAAA,EAAU,CAACtH,MAAM,kBAAkBM,GAAI,CAAEC,UAAW,aACrD,SAAC0C,EAAA,EAAO,KACR,UAACyL,GAAA,EAAW,YACV,SAACwB,GAAuB,CAAC1M,MAAOsN,EAAW,EAAIA,EAAW,IACzDO,EAAS5N,KAAI,SAACiO,GAAI,OACjB,SAAClB,GAAe,CAEdE,QAASgB,EAAKhB,QACdC,KAAMe,EAAKf,MAFNe,EAAKhB,QAGV,KAEJ,SAACG,GAAoB,CAACC,SAAUA,EAAUC,QAASA,WAK7D,CCvJe,SAASY,GAAY,GAA4B,IAA1B7O,EAAI,EAAJA,KAAMyB,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC5CoN,GAAWC,EAAAA,EAAAA,MAEXC,EAAa,CACjB,8BACA,kBACA,eAEF,EC7Ba,SAAiBC,GAC9B,OAAoCpJ,EAAAA,EAAAA,UAAS,GAAE,eAAxC5E,EAAU,KAAEiO,EAAa,KAahC,MAAO,CAACjO,EAXW,WACjBiO,GAAejO,EAAa,GAAKgO,EACnC,EAEuB,WACrBC,GAAejO,EAAa,EAAIgO,GAAaA,EAC/C,EAEehO,IAAegO,EAAY,EACX,IAAfhO,EAGlB,CDcoEkO,CAChEH,EAAW9K,QACZ,eAFMjD,EAAU,KAAE8D,EAAU,KAAEC,EAAc,KAAEC,EAAM,KAAEC,EAAO,KAG9D,GAAqCkK,EAAAA,EAAAA,GAAS,IAAG,eAA1ClS,EAAK,KAAIyI,EAAiB,KACjC,GAAmC0J,EAAAA,EAAAA,GAAQ,IAAG,eAAvCpR,EAAI,KAAI2H,EAAgB,KAC/B,EElCa,WACb,OAAwCC,EAAAA,EAAAA,UAAS,IAAG,eAA7CjE,EAAY,KAAE0N,EAAe,KACpC,GAAoCzJ,EAAAA,EAAAA,UAAS,IAAG,eAAzChE,EAAU,KAAE0N,EAAa,KAChC,GAAkC1J,EAAAA,EAAAA,UAAS,GAAE,eAAtC4C,EAAS,KAAE+G,EAAY,KACxBC,EAAgB,CAAC,IAAK,IAAM,MAa5B/G,EAAwB,SAACrH,GAC7BmO,EAAanO,EACf,EAkEA,MAAO,CACLO,EACA6G,EAlEgC,SAACpB,GACjC,GAAIA,EAAM8D,OAAOC,MAAO,CACtB,IAAMA,EAAQsE,MAAMC,KAAKtI,EAAM8D,OAAOC,OACtCA,EAAMwE,SAAQ,SAACC,GACb,IAAMC,EAAQ,IAAIC,MAClBD,EAAME,OAAS,SAACC,GACd,IAAMhS,EAAOgK,KAAKiI,MACZC,EAAO,UAAMlS,EAAI,YAAI4R,EAAK1N,MAC1B2G,EAAS2G,EAAc9O,KAAI,SAAChD,GAAM,MAAM,CAC5CA,OAAAA,EACAa,MAAOgP,KAAK4C,KACTzS,EAASsS,EAAE9E,OAAOkF,aAAgBJ,EAAE9E,OAAOmF,eAE/C,IACDhB,GAAgB,SAACiB,GAAG,OAClBA,EAAIC,OAAO,CACT,CACErO,KAAMgO,EACNvR,KAAMiR,EAAKjR,KAAI,QACf0K,IAAK2G,EAAE9E,OAAO9N,IACdM,OAAQsS,EAAE9E,OAAOmF,cACjB9R,MAAOyR,EAAE9E,OAAOkF,aAChBI,UAAWZ,EACX/G,OAAAA,IAEF,GAEN,EACAgH,EAAMzS,IAAMqT,IAAIC,gBAAgBd,EAClC,IACAN,GAAc,SAACgB,GAAG,OAAKA,EAAIC,OAAOpF,EAAM,IACxCA,EAAMzK,KAAI,SAACkP,GAAI,OAAKa,IAAIE,gBAAgBf,EAAK,GAC/C,CACF,EAE4B,SAACxO,GAC3BiO,EAAgB,GAAD,eACV1N,EAAaiP,MAAM,EAAGxP,KAAM,OAC5BO,EAAaiP,MAAMxP,EAAQ,MAGhCkO,EAAc,GAAD,eACR1N,EAAWgP,MAAM,EAAGxP,KAAM,OAC1BQ,EAAWgP,MAAMxP,EAAQ,MAG1BA,EAAQoH,EACVC,EAAsBD,EAAY,GACzBpH,IAAUoH,GACnBC,EAAsB,EAE1B,EAkBEA,EApF0B,SAACrH,EAAOkI,GAClC+F,EAAgB,GAAD,eACV1N,EAAaiP,MAAM,EAAGxP,IAAM,oBAE1BO,EAAaP,IAAM,IACtBkI,QAAAA,MAAO,OAEN3H,EAAaiP,MAAMxP,EAAQ,KAElC,EA+EF,CFpDMyP,GAAmB,eAPrBlP,EAAY,KACZ6G,EAAS,KACT8B,EAAyB,KACzBC,EAAmB,KACnB9B,EAAqB,KACrBC,EACA,KAGF,GAAqCoI,EAAAA,EAAAA,GAAS,IAAG,eAA1C/E,EAAK,KAAIC,EAAiB,KACjC,GAAwBpG,EAAAA,EAAAA,WAAS,GAAM,gBAAhCqD,GAAI,MAAEC,GAAO,MACpB,IAAgCtD,EAAAA,EAAAA,UAAS,GAAE,iBAApCmI,GAAQ,MAAEgD,GAAW,MAC5B,GG/Ca,WACb,OAAgCnL,EAAAA,EAAAA,UAAS,IAAG,eAArC0I,EAAQ,KAAE0C,EAAW,KAY5B,MAAO,CAAC1C,EAVW,SAACX,EAASC,GAC3B,IAAMqD,EAAa,CAAC,CAAEtD,QAAAA,EAASC,KAAAA,IAC/BoD,GAAY,SAACV,GAAG,OAAKA,EAAIC,OAAOU,EAAW,GAC7C,EAE4B,SAACtD,EAASC,GACpC,IAAMqD,EAAa,CAAC,CAAEtD,QAAAA,EAASC,KAAAA,IAC/BoD,GAAY,SAACV,GAAG,OAAKA,EAAIM,MAAM,GAAI,GAAGL,OAAOU,EAAW,GAC1D,EAGF,CHiCsDC,GAAoB,iBAAjE5C,GAAQ,MAAE3K,GAAU,MAAED,GAAmB,MAChD,IAAsCkC,EAAAA,EAAAA,UAAS,GAAE,iBAA1CuL,GAAW,MAAEC,GAAc,MAE5B3N,GAAiB,SAAC4N,GAAkB,OACxCN,GAAYM,EAAoB,EAC5BxP,GAAsB,WAAH,OAASuP,IAAe,SAACE,GAAG,OAAKA,EAAM,CAAC,GAAE,EAC7D1P,GAAaD,EAAajB,KAAI,SAACqB,GAAM,OAAKA,EAAOyO,SAAS,KAEhEzJ,EAAAA,EAAAA,YAAU,WACR,IAAM4G,EAAO,4BAAwBwD,GAAW,YAAIxP,EAAasC,OAAM,KACnEkN,IAAe,GAAKpD,IAAY,KACd,IAAhBoD,GAAmBxN,GAAWgK,GAAS,GACtCjK,GAAoBiK,GAAS,GAE9BhM,EAAasC,SAAWkN,IAC1BzN,GAAoBiK,GAAS,GAEnC,GAAG,CAACwD,GAAapD,KAEjB,IAqFIwD,GArFEC,IACJ,SAAC/L,EAAa,CACZzE,WAAYA,EACZ8D,WAAYA,EACZC,eAAgBA,EAChBC,OAAQA,EACRC,QAASA,EACThI,MAAOA,EACPe,KAAMA,EACN0H,kBAAmBA,EACnBC,iBAAkBA,IAIhB8L,IACJ,SAACpH,GAAS,CACR1I,aAAcA,EACd2I,0BAA2BA,EAC3BC,oBAAqBA,EACrB/B,UAAWA,EACXC,sBAAuBA,EACvB3D,WAAYA,EACZC,eAAgBA,EAChBC,OAAQA,EACRC,QAASA,EACTyD,oBAAqBA,IAMnB0B,GAAY,yCAAG,6FAeL,OAZR1I,EAAY,IAAIsG,KAAK,KAAM,EAAG,GAAG0J,UAAY1J,KAAKiI,MAClDrN,EAAgB,CACpBS,IAAK3B,EACLzE,MAAAA,EACAe,KAAAA,EACA2T,aAAc,IAAI3J,KAClBrG,aAAAA,EAEAoK,MAAAA,EACAvD,UAAW7G,EAAa6G,GACxBoJ,WA7FgB/I,EA6FQlH,EA5FrBkH,EAAOgJ,QAAO,SAACC,EAAYjC,GAAK,OAAKiC,EAAajC,EAAMlR,IAAI,GAAE,KA8FnEuK,IAAQ,GAAM,SAEQ6I,EAAY7N,aAChC1C,EACAC,EACAmB,EACAa,GACAC,GACAC,GACA/B,GACAC,IACA,KAAD,EATKmQ,EAAO,OAYXvO,IADc,IAAZuO,EACa,KAEC,GAElBvD,YAAW,kBAAMI,EAAS,YAAY,GAAE,KAAM,iCAjHlD,IAAsBhG,CAiH4B,UAC/C,kBAlCiB,mCAoCZoJ,IACJ,SAAC5D,GAAoB,CAACpF,KAAMA,GAAM8E,SAAUA,GAAUO,SAAUA,KAmB5D4D,GItJO,SACblD,EACAD,EACAoD,EACA/H,EACApJ,GAEA,OACE,SAAC8J,EAAA,GAAI,CAACM,WAAS,EAAC/K,eAAe,SAAQ,UACrC,SAACyK,EAAA,GAAI,CACHC,MAAI,EACJpN,GAAI,EACJE,GAAI,GACJN,GAAI,CACF6U,UAAW,GACX1S,aAAc,EACdD,QAAS,cACT+E,GAAI,GACJ,UAEF,UAACrE,EAAA,EAAG,YACF,SAACW,EAAW,CACVC,OAAQgO,EACR/N,WAAYA,EACZ7B,YAAa,WAAO,KAEtB,SAACe,EAAA,EAAO,IACPiS,EAAUnR,SAKrB,CJsH4BqR,CACxBtD,EACAA,EANgB,CAACyC,GAAWC,IAX5B,SAAC1E,GAAS,CACRhB,MAAOA,EACPC,kBAAmBA,EACnBlH,WAAYsF,GACZrF,eAAgBA,EAChBC,OAAQA,EACRC,QAASA,EACT+H,eAAgBiF,MAYlB7H,EACApJ,GAKIsR,GK/JO,SACbrV,EACAe,EACA2D,EACA6G,EACAuD,GAEA,OACE,UAACjB,EAAA,GAAI,CAACM,WAAS,EAAC/K,eAAe,eAAe9C,GAAI,CAAE+C,EAAG,GAAI,WACzD,UAACwK,EAAA,GAAI,CAACC,MAAI,EAAClN,GAAI,EAAGW,GAAI,EAAGZ,GAAI,EAAGD,GAAI,EAAG4U,GAAI,EAAGhV,GAAI,CAAEiV,GAAI,EAAGhO,GAAI,GAAI,WACjE,SAACF,EAAiB,CAACrH,MAAM,uBACzB,SAAC+B,EAAA,EAAe,CACd/B,MAAOA,EACPe,KAAMA,GAAQ,GACdiB,eACE0C,EAAasC,OAAS,EAAItC,EAAa6G,GAAWa,IAAM,GAE1DlK,YAAa,WAAO,QAIxB,UAAC2L,EAAA,GAAI,CAACC,MAAI,EAAClN,GAAI,GAAIF,GAAI,EAAG4U,GAAI,GAAG,WAC/B,SAACjO,EAAiB,CAACrH,MAAM,oBACzB,SAACwV,EAAA,EAAa,CACZC,QAAQ,UACRC,SAAU1V,EACV2V,QAAS5U,EACT6U,SAAU9G,EACV+G,UAAWnR,EAAajB,KAAI,SAACmP,GAAK,MAAM,CACtCzS,IAAKyS,EAAMxG,IACX9K,MAAOsR,EAAMtR,MACbb,OAAQmS,EAAMnS,OACd4L,QAASuG,EAAMvG,SAAW,GAC3B,IACDyJ,WAAYpR,EAAajB,KAAI,SAACmP,GAAK,OAAKA,EAAM3N,IAAI,WAK5D,CLwH6B8Q,CACzB/V,EACAe,EACA2D,EACA6G,EACAuD,GAUF,MARa,WAAThM,IACFwR,GAAUW,IAGC,YAATnS,IACFwR,GAAUe,IAGLf,EACT,CM/Ke,SAASrN,GAAa,GAAsB,IAApB1C,EAAM,EAANA,OAAQC,EAAO,EAAPA,QACvCxB,EAAQ,CAAC,SAAU,WACzB,GAAwB2F,EAAAA,EAAAA,UAAS3F,EAAM,IAAG,eAAnCF,EAAI,KAAEkT,EAAO,KACdnG,GAAMZ,EAAAA,EAAAA,QAAO,MAEnB,OACE,UAAC,IAAQ,YACP,SAACpM,EAAc,CAACC,KAAMA,EAAMC,iBAAkBiT,EAAShT,MAAOA,KAC9D,SAAC2O,GAAW,CACV7O,KAAMA,EACNmT,QAASpG,EACTtL,OAAQA,EACRC,QAASA,MAIjB,CPwKA4M,GAAqBjP,aAAe,CAClCkP,SAAU,G","sources":["pages/MemoryThumbnail.jsx","pages/MemoryThumbnailCard.jsx","pages/memory/create/ToggleViewMode.jsx","components/FormStepper.jsx","pages/memory/MemoryUtils.jsx","pages/memory/create/PreviewCardHeader.jsx","components/NavigationButton.jsx","components/FormStepperNavigation.jsx","components/BoxForm.jsx","pages/memory/create/TitleDateForm.jsx","components/ErrorText.jsx","pages/memory/create/ImagePreviewer.jsx","pages/memory/create/ImageForm.jsx","pages/memory/create/StoryEditor.jsx","pages/memory/create/StoryForm.jsx","pages/memory/create/CreateMemoryProgress.jsx","pages/memory/create/ModeContent.jsx","hooks/formStep.jsx","hooks/selectedImages.jsx","hooks/progressMessage.jsx","pages/memory/create/CreateMemoryForm.jsx","pages/memory/create/PreviewMemory.jsx","pages/memory/create/CreateMemory.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport CardMedia from '@mui/material/CardMedia';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport Typography from '@mui/material/Typography';\nimport Chip from '@mui/material/Chip';\nimport MemoryThumbnailCard from './MemoryThumbnailCard';\n\nfunction ThumbnailImage({ imageSrc, imageSrcSet, title, handleImageLoad }) {\n  return (\n    <CardMedia\n      component=\"img\"\n      src={imageSrc}\n      srcSet={imageSrcSet}\n      alt={title}\n      sx={{\n        textAlign: 'center',\n        objectFit: 'cover',\n        height: {\n          lg: 350,\n          md: 300,\n          xs: 250,\n        },\n      }}\n      onLoad={handleImageLoad}\n    />\n  );\n}\n\nfunction ThumbnailDetails({ title, date, avatar, shared }) {\n  return (\n    <CardContent>\n      <CardHeader\n        disableTypography\n        avatar={avatar}\n        title={\n          <Typography\n            noWrap\n            sx={{\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              width: { xs: 'calc(75%)', sm: 'calc(100%)' },\n              fontWeight: 600,\n            }}\n          >\n            {title}\n            {shared !== '' ? (\n              <>\n                {' '}\n                <Chip\n                  label={shared}\n                  size=\"small\"\n                  variant=\"filled\"\n                  color={shared === 'Shared' ? 'success' : 'default'}\n                  sx={{ height: 'auto' }}\n                />\n              </>\n            ) : null}\n          </Typography>\n        }\n        subheader={<Typography sx={{ color: 'muted.main' }}>{date}</Typography>}\n        sx={{\n          padding: 0,\n          color: 'faded.black',\n        }}\n      />\n    </CardContent>\n  );\n}\n\nexport default function MemoryThumbnail({\n  title,\n  date,\n  avatar,\n  shared,\n  thumbnailImage,\n  thumbnailImageSrcSet,\n  handleClick,\n  handleImageLoad,\n}) {\n  return (\n    <MemoryThumbnailCard handleClick={handleClick}>\n      <ThumbnailImage\n        imageSrc={thumbnailImage}\n        imageSrcSet={thumbnailImageSrcSet}\n        title={title}\n        handleImageLoad={handleImageLoad}\n      />\n      <ThumbnailDetails\n        title={title}\n        date={date}\n        avatar={avatar}\n        shared={shared}\n      />\n    </MemoryThumbnailCard>\n  );\n}\n\nThumbnailDetails.defaultProps = {\n  title: 'Memory Thumbnail Image',\n  date: 'Memory Date',\n  avatar: '',\n  shared: '',\n};\n\nThumbnailDetails.propTypes = {\n  title: PropTypes.string,\n  date: PropTypes.string,\n  avatar: PropTypes.node,\n  shared: PropTypes.string,\n};\n\nThumbnailImage.defaultProps = {\n  title: 'Memory Thumbnail Image',\n  imageSrc: '',\n  imageSrcSet: '',\n  handleImageLoad: () => {},\n};\n\nThumbnailImage.propTypes = {\n  title: PropTypes.string,\n  imageSrc: PropTypes.string,\n  imageSrcSet: PropTypes.string,\n  handleImageLoad: PropTypes.func,\n};\n\nMemoryThumbnail.defaultProps = {\n  thumbnailImageSrcSet: '',\n  handleImageLoad: () => {},\n  avatar: '',\n  shared: '',\n};\n\nMemoryThumbnail.propTypes = {\n  title: PropTypes.oneOfType([PropTypes.element, PropTypes.string]).isRequired,\n  date: PropTypes.oneOfType([PropTypes.element, PropTypes.string]).isRequired,\n  avatar: PropTypes.node,\n  shared: PropTypes.string,\n  thumbnailImage: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  thumbnailImageSrcSet: PropTypes.string,\n  handleImageLoad: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport Card from '@mui/material/Card';\nimport CardActionArea from '@mui/material/CardActionArea';\n//  import { useTheme, alpha } from '@mui/material/styles';\n\nexport default function MemoryThumbnailCard({ handleClick, children }) {\n  //  const theme = useTheme();\n\n  return (\n    <CardActionArea onClick={handleClick}>\n      <Card\n        elevation={2}\n        sx={{\n          bgcolor: '#fff',\n          borderRadius: 5,\n          // border: '2px solid gray',\n          color: 'black',\n          position: 'relative',\n          height: {\n            lg: 430,\n            md: 380,\n            xs: 330,\n          },\n          '&:hover': {\n            border: 3,\n            borderColor: 'secondary.main',\n            elevation: 0,\n          },\n        }}\n      >\n        {children}\n      </Card>\n    </CardActionArea>\n  );\n}\n\nMemoryThumbnailCard.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport Divider from '@mui/material/Divider';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport Typography from '@mui/material/Typography';\n\nexport default function ToggleViewMode({ mode, handleModeChange, modes }) {\n  return (\n    <Divider>\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 2 }}>\n        <ToggleButtonGroup\n          exclusive\n          value={mode}\n          aria-label=\"view-change\"\n          color=\"primary\"\n          sx={{ bgcolor: 'button.main' }}\n        >\n          {modes.map((modeName) => (\n            <ToggleButton\n              key={modeName}\n              value={modeName}\n              onClick={() => handleModeChange(`${modeName}`)}\n              sx={{ border: 2, borderColor: 'primary.main' }}\n            >\n              <Typography variant=\"h6\">{modeName}</Typography>\n            </ToggleButton>\n          ))}\n        </ToggleButtonGroup>\n      </Box>\n    </Divider>\n  );\n}\n\nToggleViewMode.propTypes = {\n  mode: PropTypes.string.isRequired,\n  handleModeChange: PropTypes.func.isRequired,\n  modes: PropTypes.PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\n\nexport default function FormStepper({ titles, activeStep, handleClick }) {\n  return (\n    <Stepper activeStep={activeStep} alternativeLabel sx={{ py: 4 }}>\n      {titles.map((label, index) => (\n        <Step key={label} onClick={handleClick(index)}>\n          <StepLabel>{label}</StepLabel>\n        </Step>\n      ))}\n    </Stepper>\n  );\n}\n\nFormStepper.propTypes = {\n  titles: PropTypes.arrayOf(PropTypes.string).isRequired,\n  activeStep: PropTypes.number.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n","import memoryapi from 'api/memory';\n\nfunction UploadImages(\n  bucket,\n  authURL,\n  memoryKey,\n  title,\n  imageDetails,\n  imageFiles,\n  incrementImageCount\n) {\n  const paramList = imageDetails.map((detail, index) => {\n    const imgFile = imageFiles[index];\n    return {\n      Key: ['memories', memoryKey, 'images', detail.name].join('/'),\n      Body: imgFile,\n      ContentType: imgFile.type,\n    };\n  });\n  const uploadPromises = memoryapi.uploadMultipleImages(\n    bucket,\n    authURL,\n    paramList,\n    incrementImageCount\n  );\n  return Promise.allSettled(uploadPromises);\n}\n\nasync function ValidateDetails(bucket, authURL, memoryDetails) {\n  const detailsJSON = JSON.stringify(memoryDetails);\n  const validateResp = await memoryapi.validateDetails(\n    bucket,\n    authURL,\n    detailsJSON\n  );\n  if (validateResp.status === 'error') {\n    return false;\n  }\n  return validateResp.Valid === true;\n}\n\nasync function UploadDetails(bucket, authURL, memoryDetails) {\n  const detailsJSON = JSON.stringify(memoryDetails);\n  const memoryDetailsKey = ['memories', memoryDetails.key, 'details.json'].join(\n    '/'\n  );\n  const uploadResp = await memoryapi.upload(\n    bucket,\n    authURL,\n    memoryDetailsKey,\n    detailsJSON\n  );\n  return uploadResp && uploadResp.ok === true;\n}\n\nconst InitializeMemory = async (\n  bucket,\n  authURL,\n  memoryDetails,\n  handleProgress,\n  updateMessageStatus,\n  addMessage\n) => {\n  handleProgress(0);\n  addMessage('Initializing memory', false);\n  const valid = await ValidateDetails(bucket, authURL, memoryDetails);\n  let initRes;\n  if (valid === true) {\n    initRes = await UploadDetails(bucket, authURL, memoryDetails);\n    updateMessageStatus('Initializing Memory', initRes);\n    handleProgress(10);\n  } else {\n    updateMessageStatus('Initializing Memory', 'failed');\n  }\n  return valid;\n};\n\nconst HandleImages = async (\n  bucket,\n  authURL,\n  memoryKey,\n  title,\n  imageDetails,\n  imageFiles,\n  incrementImageCount,\n  handleProgress\n) => {\n  const imagesResults = await UploadImages(\n    bucket,\n    authURL,\n    memoryKey,\n    title,\n    imageDetails,\n    imageFiles,\n    incrementImageCount\n  );\n  for (let i = 0; i < imagesResults.length; i += 1) {\n    if (\n      imagesResults[i].status === 'rejected' ||\n      imagesResults[i].value.ok !== true\n    ) {\n      return false;\n    }\n  }\n  handleProgress(95);\n  return true;\n};\n\nconst CreateMemory = async (\n  bucket,\n  authURL,\n  memoryDetails,\n  handleProgress,\n  updateMessageStatus,\n  addMessage,\n  imageFiles,\n  incrementImageCount\n) => {\n  // Validate details and upload if valid\n  const initMemResults = await InitializeMemory(\n    bucket,\n    authURL,\n    memoryDetails,\n    handleProgress,\n    updateMessageStatus,\n    addMessage\n  );\n\n  let imagesResults;\n  if (initMemResults === true) {\n    // Upload original images\n    imagesResults = await HandleImages(\n      bucket,\n      authURL,\n      memoryDetails.key,\n      memoryDetails.title,\n      memoryDetails.imageDetails,\n      imageFiles,\n      incrementImageCount,\n      handleProgress\n    );\n\n    if (imagesResults === true) {\n      const finalizeResults = await memoryapi.finalizeMemory(\n        bucket,\n        authURL,\n        memoryDetails.key\n      );\n      if (parseInt(finalizeResults.MemoryID, 10) !== memoryDetails.key) {\n        return false;\n      }\n      return true;\n    }\n    updateMessageStatus('Uploading Original Images', 'failed');\n  }\n\n  return false;\n};\n\nexport default { CreateMemory };\n","import PropTypes from 'prop-types';\nimport CardHeader from '@mui/material/CardHeader';\n\nexport default function PreviewCardHeader({ title }) {\n  return (\n    <CardHeader\n      title={title}\n      sx={{\n        border: 0,\n        borderColor: 'primary.main',\n        textAlign: 'center',\n        width: 1,\n        mb: 1,\n        bgcolor: 'button.main',\n        p: 0,\n        py: 2,\n        borderRadius: 2,\n      }}\n    />\n  );\n}\n\nPreviewCardHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\n\nexport default function NavigationButton({ label, handleClick, disabled }) {\n  return (\n    <Button\n      onClick={handleClick}\n      disabled={disabled}\n      sx={{\n        m: 2,\n        border: 2,\n        borderColor: disabled ? 'muted.main' : 'ternary.main',\n        borderRadius: 5,\n        bgcolor: 'input.background',\n      }}\n    >\n      {label}\n    </Button>\n  );\n}\n\nNavigationButton.defaultProps = {\n  disabled: false,\n};\n\nNavigationButton.propTypes = {\n  label: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n};\n","import PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport NavigationButton from 'components/NavigationButton';\n\nexport default function FormStepperNavigation({\n  handleNext,\n  handlePrevious,\n  isLast,\n  isFirst,\n}) {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'row',\n        pt: 2,\n        width: 1,\n        justifyContent: 'space-evenly',\n      }}\n    >\n      {isFirst ? (\n        <NavigationButton disabled handleClick={() => {}} label=\"Back\" />\n      ) : (\n        <NavigationButton handleClick={handlePrevious} label=\"Back\" />\n      )}\n      {isLast ? (\n        <NavigationButton handleClick={handleNext} label=\"Create Memory\" />\n      ) : (\n        <NavigationButton handleClick={handleNext} label=\"Next\" />\n      )}\n    </Box>\n  );\n}\n\nFormStepperNavigation.propTypes = {\n  handleNext: PropTypes.func.isRequired,\n  handlePrevious: PropTypes.func.isRequired,\n  isLast: PropTypes.bool.isRequired,\n  isFirst: PropTypes.bool.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\n\nexport default function BoxForm({ children }) {\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        '& .MuiTextField-root': {\n          m: 1,\n          maxWidth: '90%',\n          width: '45ch',\n        },\n        '& .MuiOutlinedInput-root': {\n          backgroundColor: 'form.input',\n          borderRadius: 5,\n        },\n        flexDirection: 'column',\n        display: 'flex',\n        alignItems: 'center',\n        width: 'auto',\n        pt: 2,\n      }}\n      autoComplete=\"true\"\n    >\n      {children}\n    </Box>\n  );\n}\n\nBoxForm.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n\nimport * as yup from 'yup';\n\nimport FormStepperNavigation from 'components/FormStepperNavigation';\nimport BoxForm from 'components/BoxForm';\nimport utils from 'utils';\n\nexport default function TitleDateForm({\n  title,\n  date,\n  handleTitleChange,\n  handleDateChange,\n  handleNext,\n  handlePrevious,\n  isLast,\n  isFirst,\n  activeStep,\n}) {\n  const [titleError, setTitleError] = useState('');\n  const [dateError, setDateError] = useState('');\n\n  const [titleTouched, setTitleTouched] = useState(false);\n  const [dateTouched, setDateTouched] = useState(false);\n\n  const titleSchema = yup\n    .object({\n      title: yup\n        .string()\n        .required('Memory Title is required')\n        .max(40, 'Maximum length of memory title is 40'),\n    })\n    .required();\n\n  const dateSchema = yup\n    .object({\n      date: yup\n        .date(\n          'Enter date by clicking calendar icon on the right end of date picker'\n        )\n        .required('Memory Date is required')\n        .nullable(),\n    })\n    .required();\n\n  const isValid = async () => {\n    const titleValid = await utils.isFieldValid(\n      'title',\n      title,\n      setTitleError,\n      titleSchema\n    );\n    const dateValid = await utils.isFieldValid(\n      'date',\n      date,\n      setDateError,\n      dateSchema\n    );\n    return titleValid && dateValid;\n  };\n\n  useEffect(() => {\n    if (titleTouched) {\n      utils.isFieldValid('title', title, setTitleError, titleSchema);\n    }\n    if (dateTouched) {\n      utils.isFieldValid('date', date, setDateError, dateSchema);\n    }\n  }, [title, date]);\n\n  const submitForm = async (handleCallback) => {\n    const valid = await isValid();\n    if (valid) {\n      handleCallback();\n    }\n  };\n\n  const onTitleChange = (event) => {\n    setTitleTouched(true);\n    handleTitleChange(event);\n  };\n\n  const onDateChange = (event) => {\n    setDateTouched(true);\n    handleDateChange(event);\n  };\n\n  return (\n    <BoxForm>\n      <TextField\n        required\n        onChange={onTitleChange}\n        id=\"outlined-required\"\n        label=\"Memory Name\"\n        defaultValue={title}\n        helperText={titleError || \"E.g. Gogol's 2nd Birthday\"}\n        error={!!titleError}\n      />\n      <LocalizationProvider dateAdapter={AdapterDateFns}>\n        <DatePicker\n          label=\"Memory Date\"\n          value={date}\n          onChange={onDateChange}\n          placeholder=\"dd/MM/yyyy\"\n          inputFormat=\"dd/MM/yyyy\"\n          maxDate={new Date()}\n          renderInput={(props) => (\n            <TextField\n              readOnly\n              required\n              // eslint-disable-next-line react/jsx-props-no-spreading\n              {...props}\n              error={!!dateError}\n              helperText={dateError || ''}\n            />\n          )}\n        />\n      </LocalizationProvider>\n      <FormStepperNavigation\n        activeStep={activeStep}\n        handleNext={() => submitForm(handleNext)}\n        handlePrevious={handlePrevious}\n        isLast={isLast}\n        isFirst={isFirst}\n      />\n    </BoxForm>\n  );\n}\n\nTitleDateForm.defaultProps = {\n  date: '',\n};\n\nTitleDateForm.propTypes = {\n  activeStep: PropTypes.number.isRequired,\n  date: PropTypes.string,\n  isLast: PropTypes.bool.isRequired,\n  isFirst: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n\n  handleDateChange: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  handlePrevious: PropTypes.func.isRequired,\n  handleTitleChange: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Typography from '@mui/material/Typography';\n\nexport default function ErrorText({ text }) {\n  return <Typography sx={{ color: 'error.main' }}>{text}</Typography>;\n}\n\nErrorText.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\nimport Box from '@mui/material/Box';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport ThumbnailChooser from 'components/ThumbnailChooser';\nimport Button from '@mui/material/Button';\n\nimport ImageOptionsDialog from 'components/ImageOptionsDialog';\nimport AddCaptionButton from 'components/AddCaptionButton';\nimport RemoveSelectedImageButton from 'components/RemoveSelectedImageButton';\nimport MemoryPhotoAlbum from 'components/MemoryPhotoAlbum';\n\nexport default function ImagePreviewer({\n  imageDetails,\n  handleRemoveImage,\n  thumbnail,\n  handleThumbnailChange,\n  handleCaptionChange,\n  //  setDimensions,\n  //  resizeHeights,\n}) {\n  console.log(imageDetails);\n  const [images, setImages] = useState([]);\n  const [editingIndex, setEditingIndex] = useState(null);\n  const [open, setOpen] = useState(false);\n\n  const photos = () =>\n    imageDetails.map((photo, index) => ({\n      alt: index,\n      src: photo.url,\n      width: photo.width,\n      height: photo.height,\n      caption: photo.caption || '',\n    }));\n\n  useEffect(() => setImages(photos), [imageDetails]);\n  console.log(images);\n\n  const handleClose = () => {\n    setEditingIndex(null);\n    setOpen(false);\n  };\n\n  const handleCaptionClick = (index) => {\n    setEditingIndex(index);\n    setOpen(true);\n  };\n\n  const renderPhotos = ({\n    layout,\n    imageProps: { alt, style, title, ...restImageProps },\n  }) => (\n    <Button component=\"div\" sx={{ padding: '2px' }}>\n      <img\n        alt={alt}\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        style={{ ...style, width: layout.width, padding: 0 }}\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...restImageProps}\n      />\n      {layout.index !== thumbnail ? (\n        <RemoveSelectedImageButton\n          index={layout.index}\n          handleRemoveImage={handleRemoveImage}\n        />\n      ) : null}\n      <ThumbnailChooser\n        index={layout.index}\n        thumbnail={thumbnail}\n        handleThumbnailChange={handleThumbnailChange}\n      />\n      <AddCaptionButton\n        handleClick={() => handleCaptionClick(layout.index)}\n        caption={\n          'caption' in images[layout.index] ? images[layout.index].caption : ''\n        }\n      />\n    </Button>\n  );\n\n  console.log(editingIndex);\n  return images.length ? (\n    <Box component=\"div\" sx={{ py: 2 }}>\n      <Divider />\n      <Typography sx={{ p: 2 }} variant=\"h6\" align=\"center\">\n        Selected Images\n      </Typography>\n      <MemoryPhotoAlbum images={images} renderPhoto={renderPhotos} />\n      {editingIndex !== null ? (\n        <ImageOptionsDialog\n          imageCaption={\n            'caption' in images[editingIndex]\n              ? images[editingIndex].caption\n              : ''\n          }\n          index={editingIndex}\n          src={imageDetails[editingIndex].url}\n          open={open}\n          handleClose={handleClose}\n          handleSubmit={handleCaptionChange}\n        />\n      ) : null}\n    </Box>\n  ) : null;\n}\n\nImagePreviewer.propTypes = {\n  imageDetails: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      url: PropTypes.string,\n      size: PropTypes.number,\n      width: PropTypes.number,\n      height: PropTypes.number,\n      caption: PropTypes.string,\n    })\n  ).isRequired,\n  handleRemoveImage: PropTypes.func.isRequired,\n  thumbnail: PropTypes.number.isRequired,\n  handleThumbnailChange: PropTypes.func.isRequired,\n  handleCaptionChange: PropTypes.func.isRequired,\n  //  setDimensions: PropTypes.func.isRequired,\n  //  resizeHeights: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport Dialog from '@mui/material/Dialog';\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nimport Divider from '@mui/material/Divider';\n\nimport FormStepperNavigation from 'components/FormStepperNavigation';\nimport BoxForm from 'components/BoxForm';\nimport ErrorText from 'components/ErrorText';\nimport AddPhotos from 'components/AddPhotos';\nimport ImagePreviewer from './ImagePreviewer';\n\nexport default function ImageForm({\n  imageDetails,\n  thumbnail,\n  handleSelectedImageChange,\n  handleThumbnailChange,\n  removeSelectedImage,\n  handleNext,\n  handlePrevious,\n  isLast,\n  isFirst,\n  handleCaptionChange,\n  //  setDimensions,\n  //  resizeHeights,\n}) {\n  const maxAllowedImages = 15;\n  const minAllowedImages = 1;\n  const [imageError, setImageError] = useState('');\n  const [touched, setTouched] = useState(false);\n  const [totalImages, setTotalImages] = useState(0);\n  const [open, setOpen] = useState(false);\n\n  function isValid() {\n    let valid = true;\n    setImageError('');\n    if (imageDetails.length < minAllowedImages) {\n      setImageError('Need atleast one image to create a memory');\n      valid = false;\n    }\n\n    if (imageDetails.length > maxAllowedImages) {\n      setImageError(`Maximum Allowed Images per Memory: ${maxAllowedImages}`);\n      valid = false;\n    }\n\n    return valid;\n  }\n\n  useEffect(() => {\n    if (touched) isValid();\n  }, [imageDetails, touched]);\n\n  useEffect(() => {\n    if (totalImages < imageDetails.length) {\n      setTotalImages(imageDetails.length);\n    }\n    if (totalImages > imageDetails.length) {\n      setOpen(true);\n    }\n    if (totalImages === imageDetails.length) {\n      setOpen(false);\n    }\n  }, [imageDetails, totalImages]);\n\n  const handleSubmit = (handleCallback) => {\n    if (isValid()) {\n      handleCallback();\n    }\n  };\n\n  const handleImageChange = (event) => {\n    setTouched(true);\n    if (event.target.files) {\n      setTotalImages(event.target.files.length + imageDetails.length);\n    }\n    handleSelectedImageChange(event, isValid);\n  };\n\n  const handleImageDelete = (index) => {\n    setTotalImages((prevCount) => prevCount - 1);\n    removeSelectedImage(index);\n  };\n\n  return (\n    <BoxForm>\n      <Grid item>\n        <AddPhotos handleChange={handleImageChange} />\n      </Grid>\n      <Grid item container direction=\"column\" alignItems=\"center\">\n        <Typography color=\"gray\" sx={{ marginTop: 2 }}>\n          Total Images Selected: {imageDetails.length}/{maxAllowedImages}\n        </Typography>\n        <ErrorText text={imageError} />\n      </Grid>\n      <FormStepperNavigation\n        handleNext={() => handleSubmit(handleNext)}\n        handlePrevious={handlePrevious}\n        isLast={isLast}\n        isFirst={isFirst}\n      />\n      <Grid item>\n        <ImagePreviewer\n          imageDetails={imageDetails}\n          handleRemoveImage={handleImageDelete}\n          thumbnail={thumbnail}\n          handleThumbnailChange={handleThumbnailChange}\n          handleCaptionChange={handleCaptionChange}\n          //  setDimensions={setDimensions}\n          //  resizeHeights={resizeHeights}\n        />\n      </Grid>\n      <Dialog\n        open={open}\n        fullWidth\n        sx={{\n          p: 1,\n        }}\n      >\n        <Card sx={{ maxWidth: 1, p: 1 }}>\n          <CardHeader title=\"Adding Images\" sx={{ textAlign: 'center' }} />\n          <Divider />\n          <CardContent>\n            <Typography variant=\"h6\" sx={{ color: 'muted.main' }}>\n              Total Images Selected:\n              {imageDetails.length}/{maxAllowedImages}\n            </Typography>\n            <Stack justifyContent=\"center\" sx={{ py: 2 }}>\n              <Typography variant=\"h5\" color=\"error\">\n                {imageError}\n              </Typography>\n            </Stack>\n          </CardContent>\n        </Card>\n      </Dialog>\n    </BoxForm>\n  );\n}\n\nImageForm.propTypes = {\n  imageDetails: PropTypes.arrayOf(\n    PropTypes.shape({\n      url: PropTypes.string,\n      name: PropTypes.string,\n      size: PropTypes.number,\n      width: PropTypes.number,\n      height: PropTypes.number,\n    })\n  ).isRequired,\n  handleSelectedImageChange: PropTypes.func.isRequired,\n  removeSelectedImage: PropTypes.func.isRequired,\n  thumbnail: PropTypes.number.isRequired,\n  handleThumbnailChange: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  handlePrevious: PropTypes.func.isRequired,\n  isLast: PropTypes.bool.isRequired,\n  isFirst: PropTypes.bool.isRequired,\n  handleCaptionChange: PropTypes.func.isRequired,\n  //  setDimensions: PropTypes.func.isRequired,\n  //  resizeHeights: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport TextareaAutosize from '@mui/material/TextareaAutosize';\nimport { useRef, useEffect } from 'react';\n\nexport default function StoryEditor({ storyError, story, handleStoryChange }) {\n  const storyRef = useRef();\n\n  useEffect(() => {\n    storyRef.current.focus();\n  }, []);\n\n  return (\n    <Box\n      sx={{\n        p: 2,\n        m: 1,\n        my: 2,\n        border: 1,\n        borderColor: storyError ? 'error.main' : 'primary.main',\n        bgcolor: 'input.background',\n        minHeight: '200px',\n        borderRadius: 5,\n      }}\n      onClick={() => storyRef.current.focus()}\n    >\n      <TextareaAutosize\n        autoFocus\n        aria-label=\"minimum height\"\n        placeholder=\"Tell your story...\"\n        value={story}\n        onChange={handleStoryChange}\n        style={{\n          width: '100%',\n          minHeight: '184px',\n          maxHeight: '70vh',\n          boxSizing: 'border-box',\n          paddingTop: '5px',\n          border: 0,\n          overflow: 'auto',\n          outline: 'none',\n          resize: 'vertical',\n          borderRadius: 5,\n          '&:focus': {\n            border: 0,\n          },\n        }}\n        ref={storyRef}\n      />\n    </Box>\n  );\n}\n\nStoryEditor.propTypes = {\n  storyError: PropTypes.string.isRequired,\n  story: PropTypes.string.isRequired,\n  handleStoryChange: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport Box from '@mui/material/Box';\n\nimport FormStepperNavigation from 'components/FormStepperNavigation';\nimport ErrorText from 'components/ErrorText';\nimport StoryEditor from './StoryEditor';\n\nexport default function StoryForm({\n  story,\n  handleStoryChange,\n  handleNext,\n  handlePrevious,\n  isLast,\n  isFirst,\n  progressDialog,\n}) {\n  const maxStoryLength = 100000;\n  const [storyError, setStoryError] = useState('');\n\n  const submitForm = (handleCallback) => {\n    const memoryText = story;\n    if (memoryText.length <= maxStoryLength) {\n      setStoryError('');\n      handleCallback();\n    } else {\n      setStoryError(`Maximum story length is: ${maxStoryLength}`);\n    }\n  };\n\n  return (\n    <>\n      <StoryEditor\n        storyError={storyError}\n        story={story}\n        handleStoryChange={handleStoryChange}\n      />\n      <Box sx={{ p: 1, m: 1 }}>\n        <ErrorText text={storyError} />\n      </Box>\n      <FormStepperNavigation\n        handleNext={() => submitForm(handleNext)}\n        handlePrevious={handlePrevious}\n        isLast={isLast}\n        isFirst={isFirst}\n      />\n      {progressDialog}\n    </>\n  );\n}\n\nStoryForm.propTypes = {\n  story: PropTypes.string.isRequired,\n  handleStoryChange: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  handlePrevious: PropTypes.func.isRequired,\n  isLast: PropTypes.bool.isRequired,\n  isFirst: PropTypes.bool.isRequired,\n  progressDialog: PropTypes.node.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport Dialog from '@mui/material/Dialog';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nimport Divider from '@mui/material/Divider';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\n\nfunction LinearProgressWithLabel({ value }) {\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n      <Box sx={{ width: '100%', mr: 1 }}>\n        <LinearProgress variant=\"determinate\" value={value} />\n      </Box>\n      <Box sx={{ minWidth: 35 }}>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {`${Math.round(value)}%`}\n        </Typography>\n      </Box>\n    </Box>\n  );\n}\n\nfunction MessageProgress({ message, done }) {\n  let showStatus;\n  if (done === 'failed') {\n    showStatus = <Typography color=\"error.main\">Failed</Typography>;\n  } else if (done === true) {\n    showStatus = <Typography color=\"success.main\">Done</Typography>;\n  } else {\n    showStatus = <CircularProgress size={30} />;\n  }\n\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'space-between' }}>\n      <Box sx={{ width: '100%', mr: 1 }}>\n        <Typography>{message}</Typography>\n      </Box>\n      <Box sx={{ minWidth: 35 }}>{showStatus}</Box>\n    </Box>\n  );\n}\n\nfunction MemoryCreationStatus({ progress, counter }) {\n  if (progress === 100) {\n    return (\n      <>\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            m: 2,\n          }}\n        >\n          <CheckCircleOutlineIcon\n            color=\"success\"\n            fontSize=\"large\"\n            sx={{ mr: 2 }}\n          />\n          <Typography variant=\"h5\" color=\"primary.main\">\n            Memory Created Successfully\n          </Typography>\n        </Box>\n\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Box>\n            <Typography>Navigating to memories page in </Typography>\n          </Box>\n          <Box sx={{ mx: 1 }}>\n            <Typography variant=\"h6\" color=\"success.main\">\n              {counter}\n            </Typography>\n          </Box>\n          <Box>\n            <Typography>seconds</Typography>\n          </Box>\n        </Box>\n      </>\n    );\n  }\n  if (progress === -1) {\n    return (\n      <>\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            m: 2,\n          }}\n        >\n          <ErrorOutlineIcon color=\"error\" fontSize=\"large\" sx={{ mr: 2 }} />\n          <Typography variant=\"h5\" color=\"primary.main\">\n            Memory Creation Failed\n          </Typography>\n        </Box>\n\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Box>\n            <Typography>Navigating to memories page in </Typography>\n          </Box>\n          <Box sx={{ mx: 1 }}>\n            <Typography variant=\"h6\" color=\"success.main\">\n              {counter}\n            </Typography>\n          </Box>\n          <Box>\n            <Typography>seconds</Typography>\n          </Box>\n        </Box>\n      </>\n    );\n  }\n  return null;\n}\n\nexport default function CreateMemoryProgress({ open, progress, messages }) {\n  const [counter, setCounter] = useState(0);\n  useEffect(() => {\n    let timerId;\n    if (counter > 0) {\n      timerId = setTimeout(() => setCounter(counter - 1), 1000);\n    }\n    return () => clearTimeout(timerId);\n  }, [counter]);\n\n  useEffect(() => {\n    if (progress === 100 || progress === -1) setCounter(3);\n  }, [progress]);\n\n  return (\n    <Dialog\n      open={open}\n      fullWidth\n      sx={{\n        p: 1,\n      }}\n    >\n      <Card sx={{ maxWidth: 1, p: 1 }}>\n        <CardHeader title=\"Creating Memory\" sx={{ textAlign: 'center' }} />\n        <Divider />\n        <CardContent>\n          <LinearProgressWithLabel value={progress > 0 ? progress : 0} />\n          {messages.map((mesg) => (\n            <MessageProgress\n              key={mesg.message}\n              message={mesg.message}\n              done={mesg.done}\n            />\n          ))}\n          <MemoryCreationStatus progress={progress} counter={counter} />\n        </CardContent>\n      </Card>\n    </Dialog>\n  );\n}\n\nMemoryCreationStatus.propTypes = {\n  progress: PropTypes.number.isRequired,\n  counter: PropTypes.number.isRequired,\n};\n\nLinearProgressWithLabel.propTypes = {\n  value: PropTypes.number.isRequired,\n};\n\nMessageProgress.propTypes = {\n  message: PropTypes.string.isRequired,\n  done: PropTypes.bool.isRequired,\n};\n\nCreateMemoryProgress.defaultProps = {\n  messages: [],\n};\n\nCreateMemoryProgress.propTypes = {\n  open: PropTypes.bool.isRequired,\n  progress: PropTypes.number.isRequired,\n  messages: PropTypes.arrayOf(\n    PropTypes.exact({\n      message: PropTypes.string,\n      done: PropTypes.bool,\n    })\n  ),\n};\n","import { useState, useEffect } from 'react';\n\nimport { useNavigate } from 'react-router-dom';\nimport CreateMemoryForm from 'pages/memory/create/CreateMemoryForm';\nimport MemoryUtils from 'pages/memory/MemoryUtils';\nimport useTitle from 'hooks/title';\nimport useDate from 'hooks/date';\nimport useSelectedImages from 'hooks/selectedImages';\nimport useStory from 'hooks/story';\nimport useStep from 'hooks/formStep';\nimport useProgressMessage from 'hooks/progressMessage';\n\nimport PreviewMemory from './PreviewMemory';\nimport TitleDateForm from './TitleDateForm';\nimport ImageForm from './ImageForm';\nimport StoryForm from './StoryForm';\n\nimport CreateMemoryProgress from './CreateMemoryProgress';\n\nfunction getTotalSize(images) {\n  return images.reduce((partialSum, image) => partialSum + image.size, 0);\n}\n\nexport default function ModeContent({ mode, bucket, authURL }) {\n  const navigate = useNavigate();\n  //  const resizeHeights = [500, 1000, 1500];\n  const stepTitles = [\n    'Enter memory title and date',\n    'Upload Pictures',\n    'Write story',\n  ];\n  const [activeStep, handleNext, handlePrevious, isLast, isFirst] = useStep(\n    stepTitles.length\n  );\n  const [title, , handleTitleChange] = useTitle('');\n  const [date, , handleDateChange] = useDate('');\n  const [\n    imageDetails,\n    thumbnail,\n    handleSelectedImageChange,\n    removeSelectedImage,\n    handleThumbnailChange,\n    handleCaptionChange,\n    //  setDimensions,\n  ] = useSelectedImages();\n\n  const [story, , handleStoryChange] = useStory('');\n  const [open, setOpen] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [messages, addMessage, updateMessageStatus] = useProgressMessage();\n  const [uploadCount, setUploadCount] = useState(0);\n\n  const handleProgress = (progressPercentage) =>\n    setProgress(progressPercentage);\n  const incrementImageCount = () => setUploadCount((cnt) => cnt + 1);\n  const imageFiles = imageDetails.map((detail) => detail.imageFile);\n\n  useEffect(() => {\n    const message = `Uploading Images (${uploadCount}/${imageDetails.length})`;\n    if (uploadCount >= 0 && progress >= 10) {\n      if (uploadCount === 0) addMessage(message, false);\n      else updateMessageStatus(message, false);\n\n      if (imageDetails.length === uploadCount)\n        updateMessageStatus(message, true);\n    }\n  }, [uploadCount, progress]);\n\n  const TitleDate = (\n    <TitleDateForm\n      activeStep={activeStep}\n      handleNext={handleNext}\n      handlePrevious={handlePrevious}\n      isLast={isLast}\n      isFirst={isFirst}\n      title={title}\n      date={date}\n      handleTitleChange={handleTitleChange}\n      handleDateChange={handleDateChange}\n    />\n  );\n\n  const SelectImages = (\n    <ImageForm\n      imageDetails={imageDetails}\n      handleSelectedImageChange={handleSelectedImageChange}\n      removeSelectedImage={removeSelectedImage}\n      thumbnail={thumbnail}\n      handleThumbnailChange={handleThumbnailChange}\n      handleNext={handleNext}\n      handlePrevious={handlePrevious}\n      isLast={isLast}\n      isFirst={isFirst}\n      handleCaptionChange={handleCaptionChange}\n      //  setDimensions={setDimensions}\n      //  resizeHeights={resizeHeights}\n    />\n  );\n\n  const handleSubmit = async () => {\n    // so that the newest memory has the smallest key and so  comes first in s3 listObjects\n    // When this fails wont be there to take blame. Should be dead by then. :-)\n    const memoryKey = new Date(2100, 1, 1).getTime() - Date.now();\n    const memoryDetails = {\n      key: memoryKey,\n      title,\n      date,\n      lastModified: new Date(),\n      imageDetails,\n      //  contentState: convertToRaw(editorState.getCurrentContent()),\n      story,\n      thumbnail: imageDetails[thumbnail],\n      totalSize: getTotalSize(imageDetails),\n    };\n    setOpen(true);\n\n    const created = await MemoryUtils.CreateMemory(\n      bucket,\n      authURL,\n      memoryDetails,\n      handleProgress,\n      updateMessageStatus,\n      addMessage,\n      imageFiles,\n      incrementImageCount\n    );\n\n    if (created === true) {\n      handleProgress(100);\n    } else {\n      handleProgress(-1);\n    }\n    setTimeout(() => navigate('/memories'), 3000);\n  };\n\n  const ProgressDialog = (\n    <CreateMemoryProgress open={open} progress={progress} messages={messages} />\n  );\n\n  const WriteStory = (\n    <StoryForm\n      story={story}\n      handleStoryChange={handleStoryChange}\n      handleNext={handleSubmit}\n      handlePrevious={handlePrevious}\n      isLast={isLast}\n      isFirst={isFirst}\n      progressDialog={ProgressDialog}\n    />\n  );\n\n  const stepForms = [TitleDate, SelectImages, WriteStory];\n\n  let content;\n\n  const CreateModeContent = CreateMemoryForm(\n    stepTitles.length,\n    stepTitles,\n    stepForms,\n    handleSubmit,\n    activeStep,\n    isLast,\n    handleNext,\n    handlePrevious\n  );\n  const PreviewModeContent = PreviewMemory(\n    title,\n    date,\n    imageDetails,\n    thumbnail,\n    story\n  );\n  if (mode === 'Create') {\n    content = CreateModeContent;\n  }\n\n  if (mode === 'Preview') {\n    content = PreviewModeContent;\n  }\n\n  return content;\n}\n","import { useState } from 'react';\n\nexport default function useStep(stepCount) {\n  const [activeStep, setActiveStep] = useState(0);\n\n  const handleNext = () => {\n    setActiveStep((activeStep + 1) % stepCount);\n  };\n\n  const handlePrevious = () => {\n    setActiveStep((activeStep - 1 + stepCount) % stepCount);\n  };\n\n  const isLast = activeStep === stepCount - 1;\n  const isFirst = activeStep === 0;\n\n  return [activeStep, handleNext, handlePrevious, isLast, isFirst];\n}\n","import { useState } from 'react';\n\nexport default function useSelectedImages() {\n  const [imageDetails, setImageDetails] = useState([]);\n  const [imageFiles, setImageFiles] = useState([]);\n  const [thumbnail, setThumbnail] = useState(0);\n  const resizeHeights = [500, 1000, 1500];\n\n  const handleCaptionChange = (index, caption) => {\n    setImageDetails([\n      ...imageDetails.slice(0, index),\n      {\n        ...imageDetails[index],\n        caption,\n      },\n      ...imageDetails.slice(index + 1),\n    ]);\n  };\n\n  const handleThumbnailChange = (index) => {\n    setThumbnail(index);\n  };\n\n  const handleSelectedImageChange = (event) => {\n    if (event.target.files) {\n      const files = Array.from(event.target.files);\n      files.forEach((file) => {\n        const image = new Image();\n        image.onload = (e) => {\n          const date = Date.now();\n          const newName = `${date}-${file.name}`;\n          const images = resizeHeights.map((height) => ({\n            height,\n            width: Math.ceil(\n              (height * e.target.naturalWidth) / e.target.naturalHeight\n            ),\n          }));\n          setImageDetails((arr) =>\n            arr.concat([\n              {\n                name: newName,\n                size: file.size / (1024 * 1024),\n                url: e.target.src,\n                height: e.target.naturalHeight,\n                width: e.target.naturalWidth,\n                imageFile: file,\n                images,\n              },\n            ])\n          );\n        };\n        image.src = URL.createObjectURL(file);\n      });\n      setImageFiles((arr) => arr.concat(files));\n      files.map((file) => URL.revokeObjectURL(file)); // avoid memory leak\n    }\n  };\n\n  const removeSelectedImage = (index) => {\n    setImageDetails([\n      ...imageDetails.slice(0, index),\n      ...imageDetails.slice(index + 1),\n    ]);\n\n    setImageFiles([\n      ...imageFiles.slice(0, index),\n      ...imageFiles.slice(index + 1),\n    ]);\n\n    if (index < thumbnail) {\n      handleThumbnailChange(thumbnail - 1);\n    } else if (index === thumbnail) {\n      handleThumbnailChange(0);\n    }\n  };\n\n  //  const setDimensions = (index, images) => {\n  //  setImageDetails([\n  //  ...imageDetails.slice(0, index),\n  //  {\n  //  ...imageDetails[index],\n  //  images,\n  //  },\n  //  ...imageDetails.slice(index + 1),\n  //  ]);\n  //  };\n\n  return [\n    imageDetails,\n    thumbnail,\n    handleSelectedImageChange,\n    removeSelectedImage,\n    handleThumbnailChange,\n    handleCaptionChange,\n    //  setDimensions,\n  ];\n}\n","import { useState } from 'react';\n\nexport default function useProgressMessage() {\n  const [messages, setMessages] = useState([]);\n\n  const addMessage = (message, done) => {\n    const newMessage = [{ message, done }];\n    setMessages((arr) => arr.concat(newMessage));\n  };\n\n  const updateMessageStatus = (message, done) => {\n    const newMessage = [{ message, done }];\n    setMessages((arr) => arr.slice(0, -1).concat(newMessage));\n  };\n\n  return [messages, addMessage, updateMessageStatus];\n}\n","import Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Divider from '@mui/material/Divider';\nimport FormStepper from 'components/FormStepper';\n\nexport default function CreateMemoryForm(\n  stepCount,\n  stepTitles,\n  stepForms,\n  handleSubmit,\n  activeStep\n) {\n  return (\n    <Grid container justifyContent=\"center\">\n      <Grid\n        item\n        lg={6}\n        xs={12}\n        sx={{\n          boxShadow: 10,\n          borderRadius: 5,\n          bgcolor: 'button.main',\n          mb: 2,\n        }}\n      >\n        <Box>\n          <FormStepper\n            titles={stepTitles}\n            activeStep={activeStep}\n            handleClick={() => {}}\n          />\n          <Divider />\n          {stepForms[activeStep]}\n        </Box>\n      </Grid>\n    </Grid>\n  );\n}\n","import Grid from '@mui/material/Grid';\n\nimport MemoryThumbnail from 'pages/MemoryThumbnail';\nimport MemoryContent from 'pages/memory/MemoryContent';\nimport PreviewCardHeader from './PreviewCardHeader';\n\nexport default function PreviewMemory(\n  title,\n  date,\n  imageDetails,\n  thumbnail,\n  story\n) {\n  return (\n    <Grid container justifyContent=\"space-evenly\" sx={{ p: 0 }}>\n      <Grid item xs={6} sm={4} md={4} lg={3} xl={2} sx={{ px: 1, mb: 1 }}>\n        <PreviewCardHeader title=\"Thumbnail Preview\" />\n        <MemoryThumbnail\n          title={title}\n          date={date || ''}\n          thumbnailImage={\n            imageDetails.length > 0 ? imageDetails[thumbnail].url : ''\n          }\n          handleClick={() => {}}\n        />\n      </Grid>\n\n      <Grid item xs={12} lg={9} xl={10}>\n        <PreviewCardHeader title=\"Memory Preview\" />\n        <MemoryContent\n          memType=\"preview\"\n          memTitle={title}\n          memDate={date}\n          memStory={story}\n          memImages={imageDetails.map((image) => ({\n            src: image.url,\n            width: image.width,\n            height: image.height,\n            caption: image.caption || '',\n          }))}\n          imageNames={imageDetails.map((image) => image.name)}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n","import { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport BasePage from 'pages/base_page';\nimport ToggleViewMode from './ToggleViewMode';\nimport ModeContent from './ModeContent';\n\nexport default function CreateMemory({ bucket, authURL }) {\n  const modes = ['Create', 'Preview'];\n  const [mode, setMode] = useState(modes[0]);\n  const ref = useRef(null);\n\n  return (\n    <BasePage>\n      <ToggleViewMode mode={mode} handleModeChange={setMode} modes={modes} />\n      <ModeContent\n        mode={mode}\n        formRef={ref}\n        bucket={bucket}\n        authURL={authURL}\n      />\n    </BasePage>\n  );\n}\n\nCreateMemory.propTypes = {\n  bucket: PropTypes.string.isRequired,\n  authURL: PropTypes.string.isRequired,\n};\n"],"names":["ThumbnailImage","imageSrc","imageSrcSet","title","handleImageLoad","component","src","srcSet","alt","sx","textAlign","objectFit","height","lg","md","xs","onLoad","ThumbnailDetails","date","avatar","shared","disableTypography","noWrap","overflow","textOverflow","width","sm","fontWeight","label","size","variant","color","subheader","padding","MemoryThumbnail","thumbnailImage","thumbnailImageSrcSet","handleClick","defaultProps","MemoryThumbnailCard","children","onClick","elevation","bgcolor","borderRadius","position","border","borderColor","ToggleViewMode","mode","handleModeChange","modes","Divider","Box","display","justifyContent","p","ToggleButtonGroup","exclusive","value","map","modeName","ToggleButton","Typography","FormStepper","titles","activeStep","Stepper","alternativeLabel","py","index","Step","StepLabel","UploadImages","bucket","authURL","memoryKey","imageDetails","imageFiles","incrementImageCount","paramList","detail","imgFile","Key","name","join","Body","ContentType","type","uploadPromises","memoryapi","Promise","allSettled","ValidateDetails","memoryDetails","detailsJSON","JSON","stringify","validateResp","status","Valid","UploadDetails","memoryDetailsKey","key","uploadResp","ok","InitializeMemory","handleProgress","updateMessageStatus","addMessage","valid","initRes","HandleImages","imagesResults","i","length","CreateMemory","finalizeResults","parseInt","MemoryID","PreviewCardHeader","CardHeader","mb","NavigationButton","disabled","Button","m","FormStepperNavigation","handleNext","handlePrevious","isLast","isFirst","flexDirection","pt","BoxForm","maxWidth","backgroundColor","alignItems","autoComplete","TitleDateForm","handleTitleChange","handleDateChange","useState","titleError","setTitleError","dateError","setDateError","titleTouched","setTitleTouched","dateTouched","setDateTouched","titleSchema","yup","required","max","dateSchema","nullable","isValid","utils","titleValid","dateValid","useEffect","submitForm","handleCallback","TextField","onChange","event","id","defaultValue","helperText","error","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","placeholder","inputFormat","maxDate","Date","renderInput","props","readOnly","ErrorText","text","ImagePreviewer","handleRemoveImage","thumbnail","handleThumbnailChange","handleCaptionChange","console","log","images","setImages","editingIndex","setEditingIndex","open","setOpen","photos","photo","url","caption","align","MemoryPhotoAlbum","renderPhoto","layout","imageProps","style","restImageProps","RemoveSelectedImageButton","ThumbnailChooser","AddCaptionButton","ImageOptionsDialog","imageCaption","handleClose","handleSubmit","ImageForm","handleSelectedImageChange","removeSelectedImage","imageError","setImageError","touched","setTouched","totalImages","setTotalImages","Grid","item","AddPhotos","handleChange","target","files","container","direction","marginTop","prevCount","Dialog","fullWidth","Card","CardContent","Stack","StoryEditor","storyError","story","handleStoryChange","storyRef","useRef","current","focus","my","minHeight","TextareaAutosize","autoFocus","maxHeight","boxSizing","paddingTop","outline","resize","ref","StoryForm","progressDialog","maxStoryLength","setStoryError","LinearProgressWithLabel","mr","LinearProgress","minWidth","Math","round","MessageProgress","showStatus","message","done","CircularProgress","MemoryCreationStatus","progress","counter","CheckCircleOutline","fontSize","mx","ErrorOutline","CreateMemoryProgress","messages","setCounter","timerId","setTimeout","clearTimeout","mesg","ModeContent","navigate","useNavigate","stepTitles","stepCount","setActiveStep","useStep","useTitle","useDate","setImageDetails","setImageFiles","setThumbnail","resizeHeights","Array","from","forEach","file","image","Image","onload","e","now","newName","ceil","naturalWidth","naturalHeight","arr","concat","imageFile","URL","createObjectURL","revokeObjectURL","slice","useSelectedImages","useStory","setProgress","setMessages","newMessage","useProgressMessage","uploadCount","setUploadCount","progressPercentage","cnt","content","TitleDate","SelectImages","getTime","lastModified","totalSize","reduce","partialSum","MemoryUtils","created","ProgressDialog","CreateModeContent","stepForms","boxShadow","CreateMemoryForm","PreviewModeContent","xl","px","MemoryContent","memType","memTitle","memDate","memStory","memImages","imageNames","PreviewMemory","setMode","formRef"],"sourceRoot":""}