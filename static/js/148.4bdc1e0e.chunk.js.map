{"version":3,"file":"static/js/148.4bdc1e0e.chunk.js","mappings":"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","sources":["pages/collage/View.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport collageapi from 'api/collage';\nimport helpers from 'components/collage/helpers';\nimport BaseCollage from 'pages/collage/Base';\n\nasync function downloadImages(imgURLS) {\n  const urlFileMap = {};\n  console.time('downloading images');\n  await Promise.allSettled(\n    Object.entries(imgURLS).map(([title, url]) =>\n      fetch(url)\n        .then((resp) => resp.blob())\n        .then((f) => {\n          urlFileMap[title] = f;\n        })\n    )\n  );\n\n  return urlFileMap;\n}\n\nasync function convertToBase64(imgFiles) {\n  const urlBase64Map = {};\n  console.time('base64 images');\n  await Promise.allSettled(\n    Object.entries(imgFiles).map(([title, f]) =>\n      helpers.convertBase64(f).then((b64) => {\n        urlBase64Map[title] = b64;\n      })\n    )\n  );\n  return urlBase64Map;\n}\n\nasync function getImages(imgDets, urls, handleImageDetails, startLoad) {\n  console.time('getImages downloading images');\n  const urlFileMap = await downloadImages(urls);\n  console.log('getImages get images', urlFileMap);\n  console.timeEnd('getImages downloading images');\n  console.time('getImages base64 images');\n  const urlBase64Map = await convertToBase64(urlFileMap);\n  console.timeEnd('getImages base64 images');\n  startLoad();\n  console.time('getImages handle image convert');\n  const tempImages = await Promise.allSettled(\n    imgDets.map((img) => {\n      const result = new Promise((resolve) => {\n        const { naturalWidth, naturalHeight, title, aspectRatio, type } = img;\n        console.time(`getImages convert ${title}`);\n        // const imageSRC = await fetch(urls[title]).then((resp) => resp.blob());\n        const imageSRC = urlFileMap[title];\n        const base64SRC = urlBase64Map[title];\n        const image = new Image();\n        image.onload = () => {\n          const imageDetail = {\n            title,\n            src: helpers.optimizeImage(image, 1500, 1500 / aspectRatio),\n            originalSRC: base64SRC,\n            originalHeight: naturalHeight,\n            originalWidth: naturalWidth,\n            naturalHeight: 1500 / aspectRatio,\n            naturalWidth: 1500,\n            aspectRatio,\n            type,\n            file: imageSRC,\n          };\n          handleImageDetails(imageDetail);\n          console.timeEnd(`getImages convert ${title}`);\n          resolve(imageDetail);\n        };\n        image.src = base64SRC;\n      });\n      return result;\n    })\n  );\n  console.timeEnd('getImages handle image convert');\n  return tempImages.map((elem) => elem.value);\n}\n\nexport default function CollageView() {\n  const params = useParams();\n  const { collageID } = params;\n\n  const getCollage = async (\n    handleImageCount,\n    handleNewImageCount,\n    handleImageDetails\n  ) => {\n    console.log('get collage from params', collageID);\n    console.time('getImages view collage');\n    const details = await collageapi.getCollage(collageID);\n    // handleImageCount(details.details.images.length);\n    // handleNewImageCount(details.details.images.length);\n    const images = await getImages(\n      details.details.images,\n      details.urls,\n      handleImageDetails,\n      () => {\n        handleImageCount(details.details.images.length);\n        handleNewImageCount(details.details.images.length);\n      }\n    );\n    console.log('image details', images);\n    const imageDets = images.map((img) => {\n      const { src, originalSRC, file, ...rest } = img;\n      return rest;\n    });\n    console.timeEnd('getImages view collage');\n    return { details: { ...details.details, images: imageDets }, images };\n  };\n\n  return (\n    <BaseCollage\n      getCollage={getCollage}\n      clearCollage={() => collageapi.deleteCollage(collageID)}\n      saveType=\"existing\"\n    />\n  );\n}\n"],"names":["downloadImages","imgURLS","urlFileMap","console","time","Promise","allSettled","Object","entries","map","title","url","fetch","then","resp","blob","f","convertToBase64","imgFiles","urlBase64Map","helpers","b64","getImages","imgDets","urls","handleImageDetails","startLoad","log","timeEnd","img","resolve","naturalWidth","naturalHeight","aspectRatio","type","imageSRC","base64SRC","image","Image","onload","imageDetail","src","originalSRC","originalHeight","originalWidth","file","tempImages","elem","value","CollageView","collageID","useParams","getCollage","handleImageCount","handleNewImageCount","collageapi","details","images","length","imageDets","clearCollage","saveType"],"sourceRoot":""}